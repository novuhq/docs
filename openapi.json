{
  "openapi": "3.0.0",
  "paths": {
    "/v1/events/trigger": {
      "post": {
        "operationId": "EventsController_trigger",
        "x-speakeasy-group": "",
        "x-speakeasy-usage-example": {
          "title": "Trigger Notification Event"
        },
        "x-speakeasy-name-override": "trigger",
        "summary": "Trigger event",
        "description": "\n    Trigger event is the main (and only) way to send notifications to subscribers. \n    The trigger identifier is used to match the particular workflow associated with it. \n    Additional information can be passed according the body interface below.\n    ",
        "parameters": [
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerEventRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerEventResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Events"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.trigger({\n    workflowId: \"workflow_identifier\",\n    payload: {\n      \"comment_id\": \"string\",\n      \"post\": {\n        \"text\": \"string\",\n      },\n    },\n    overrides: {\n      \"fcm\": {\n        \"data\": {\n          \"key\": \"value\",\n        },\n      },\n    },\n    to: {\n      subscriberId: \"<id>\",\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$triggerEventRequestDto = new Components\\TriggerEventRequestDto(\n    workflowId: 'workflow_identifier',\n    payload: [\n        'comment_id' => 'string',\n        'post' => [\n            'text' => 'string',\n        ],\n    ],\n    overrides: [\n        'fcm' => [\n            'data' => [\n                'key' => 'value',\n            ],\n        ],\n    ],\n    to: new Components\\SubscriberPayloadDto(\n        subscriberId: '<id>',\n    ),\n);\n\n$response = $sdk->trigger(\n    triggerEventRequestDto: $triggerEventRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->triggerEventResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Trigger(ctx, components.TriggerEventRequestDto{\n        WorkflowID: \"workflow_identifier\",\n        Payload: map[string]any{\n            \"comment_id\": \"string\",\n            \"post\": map[string]any{\n                \"text\": \"string\",\n            },\n        },\n        Overrides: map[string]map[string]any{\n            \"fcm\": map[string]any{\n                \"data\": map[string]any{\n                    \"key\": \"value\",\n                },\n            },\n        },\n        To: components.CreateToSubscriberPayloadDto(\n            components.SubscriberPayloadDto{\n                SubscriberID: \"<id>\",\n            },\n        ),\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.TriggerEventResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import novu_py\nfrom novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.trigger(trigger_event_request_dto=novu_py.TriggerEventRequestDto(\n        workflow_id=\"workflow_identifier\",\n        payload={\n            \"comment_id\": \"string\",\n            \"post\": {\n                \"text\": \"string\",\n            },\n        },\n        overrides={\n            \"fcm\": {\n                \"data\": {\n                    \"key\": \"value\",\n                },\n            },\n        },\n        to={\n            \"subscriber_id\": \"<id>\",\n        },\n    ))\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/events/trigger/bulk": {
      "post": {
        "operationId": "EventsController_triggerBulk",
        "x-speakeasy-group": "",
        "x-speakeasy-usage-example": {
          "title": "Trigger Notification Events in Bulk"
        },
        "x-speakeasy-name-override": "triggerBulk",
        "summary": "Bulk trigger event",
        "description": "\n      Using this endpoint you can trigger multiple events at once, to avoid multiple calls to the API.\n      The bulk API is limited to 100 events per request.\n    ",
        "parameters": [
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTriggerEventDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TriggerEventResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Events"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.triggerBulk({\n    events: [\n      {\n        workflowId: \"workflow_identifier\",\n        payload: {\n          \"comment_id\": \"string\",\n          \"post\": {\n            \"text\": \"string\",\n          },\n        },\n        overrides: {\n          \"fcm\": {\n            \"data\": {\n              \"key\": \"value\",\n            },\n          },\n        },\n        to: {\n          subscriberId: \"<id>\",\n        },\n      },\n      {\n        workflowId: \"workflow_identifier\",\n        payload: {\n          \"comment_id\": \"string\",\n          \"post\": {\n            \"text\": \"string\",\n          },\n        },\n        overrides: {\n          \"fcm\": {\n            \"data\": {\n              \"key\": \"value\",\n            },\n          },\n        },\n        to: [\n          {\n            topicKey: \"<value>\",\n            type: \"Subscriber\",\n          },\n        ],\n      },\n      {\n        workflowId: \"workflow_identifier\",\n        payload: {\n          \"comment_id\": \"string\",\n          \"post\": {\n            \"text\": \"string\",\n          },\n        },\n        overrides: {\n          \"fcm\": {\n            \"data\": {\n              \"key\": \"value\",\n            },\n          },\n        },\n        to: [\n          \"SUBSCRIBER_ID\",\n          \"SUBSCRIBER_ID\",\n        ],\n      },\n    ],\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$bulkTriggerEventDto = new Components\\BulkTriggerEventDto(\n    events: [\n        new Components\\TriggerEventRequestDto(\n            workflowId: 'workflow_identifier',\n            payload: [\n                'comment_id' => 'string',\n                'post' => [\n                    'text' => 'string',\n                ],\n            ],\n            overrides: [\n                'fcm' => [\n                    'data' => [\n                        'key' => 'value',\n                    ],\n                ],\n            ],\n            to: new Components\\TopicPayloadDto(\n                topicKey: '<value>',\n                type: Components\\TriggerRecipientsTypeEnum::Topic,\n            ),\n        ),\n    ],\n);\n\n$response = $sdk->triggerBulk(\n    bulkTriggerEventDto: $bulkTriggerEventDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->triggerEventResponseDtos !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.TriggerBulk(ctx, components.BulkTriggerEventDto{\n        Events: []components.TriggerEventRequestDto{\n            components.TriggerEventRequestDto{\n                WorkflowID: \"workflow_identifier\",\n                Payload: map[string]any{\n                    \"comment_id\": \"string\",\n                    \"post\": map[string]any{\n                        \"text\": \"string\",\n                    },\n                },\n                Overrides: map[string]map[string]any{\n                    \"fcm\": map[string]any{\n                        \"data\": map[string]any{\n                            \"key\": \"value\",\n                        },\n                    },\n                },\n                To: components.CreateToSubscriberPayloadDto(\n                    components.SubscriberPayloadDto{\n                        SubscriberID: \"<id>\",\n                    },\n                ),\n            },\n            components.TriggerEventRequestDto{\n                WorkflowID: \"workflow_identifier\",\n                Payload: map[string]any{\n                    \"comment_id\": \"string\",\n                    \"post\": map[string]any{\n                        \"text\": \"string\",\n                    },\n                },\n                Overrides: map[string]map[string]any{\n                    \"fcm\": map[string]any{\n                        \"data\": map[string]any{\n                            \"key\": \"value\",\n                        },\n                    },\n                },\n                To: components.CreateToArrayOf1(\n                    []components.One{\n                        components.CreateOneTopicPayloadDto(\n                            components.TopicPayloadDto{\n                                TopicKey: \"<value>\",\n                                Type: components.TriggerRecipientsTypeEnumSubscriber,\n                            },\n                        ),\n                    },\n                ),\n            },\n            components.TriggerEventRequestDto{\n                WorkflowID: \"workflow_identifier\",\n                Payload: map[string]any{\n                    \"comment_id\": \"string\",\n                    \"post\": map[string]any{\n                        \"text\": \"string\",\n                    },\n                },\n                Overrides: map[string]map[string]any{\n                    \"fcm\": map[string]any{\n                        \"data\": map[string]any{\n                            \"key\": \"value\",\n                        },\n                    },\n                },\n                To: components.CreateToArrayOf1(\n                    []components.One{\n                        components.CreateOneStr(\n                            \"SUBSCRIBER_ID\",\n                        ),\n                        components.CreateOneStr(\n                            \"SUBSCRIBER_ID\",\n                        ),\n                    },\n                ),\n            },\n        },\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.TriggerEventResponseDtos != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import novu_py\nfrom novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.trigger_bulk(bulk_trigger_event_dto={\n        \"events\": [\n            novu_py.TriggerEventRequestDto(\n                workflow_id=\"workflow_identifier\",\n                payload={\n                    \"comment_id\": \"string\",\n                    \"post\": {\n                        \"text\": \"string\",\n                    },\n                },\n                overrides={\n                    \"fcm\": {\n                        \"data\": {\n                            \"key\": \"value\",\n                        },\n                    },\n                },\n                to={\n                    \"subscriber_id\": \"<id>\",\n                },\n            ),\n            novu_py.TriggerEventRequestDto(\n                workflow_id=\"workflow_identifier\",\n                payload={\n                    \"comment_id\": \"string\",\n                    \"post\": {\n                        \"text\": \"string\",\n                    },\n                },\n                overrides={\n                    \"fcm\": {\n                        \"data\": {\n                            \"key\": \"value\",\n                        },\n                    },\n                },\n                to=[\n                    {\n                        \"topic_key\": \"<value>\",\n                        \"type\": novu_py.TriggerRecipientsTypeEnum.SUBSCRIBER,\n                    },\n                ],\n            ),\n            novu_py.TriggerEventRequestDto(\n                workflow_id=\"workflow_identifier\",\n                payload={\n                    \"comment_id\": \"string\",\n                    \"post\": {\n                        \"text\": \"string\",\n                    },\n                },\n                overrides={\n                    \"fcm\": {\n                        \"data\": {\n                            \"key\": \"value\",\n                        },\n                    },\n                },\n                to=[\n                    \"SUBSCRIBER_ID\",\n                    \"SUBSCRIBER_ID\",\n                ],\n            ),\n        ],\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/events/trigger/broadcast": {
      "post": {
        "operationId": "EventsController_broadcastEventToAll",
        "x-speakeasy-group": "",
        "x-speakeasy-usage-example": {
          "title": "Broadcast Event to All"
        },
        "x-speakeasy-name-override": "triggerBroadcast",
        "summary": "Broadcast event to all",
        "description": "Trigger a broadcast event to all existing subscribers, could be used to send announcements, etc.\n      In the future could be used to trigger events to a subset of subscribers based on defined filters.",
        "parameters": [
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerEventToAllRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerEventResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Broadcast request has been registered successfully ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerEventResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Events"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.triggerBroadcast({\n    name: \"<value>\",\n    payload: {\n      \"comment_id\": \"string\",\n      \"post\": {\n        \"text\": \"string\",\n      },\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$triggerEventToAllRequestDto = new Components\\TriggerEventToAllRequestDto(\n    name: '<value>',\n    payload: [\n        'comment_id' => 'string',\n        'post' => [\n            'text' => 'string',\n        ],\n    ],\n    overrides: new Components\\TriggerEventToAllRequestDtoOverrides(),\n);\n\n$response = $sdk->triggerBroadcast(\n    triggerEventToAllRequestDto: $triggerEventToAllRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->triggerEventResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.TriggerBroadcast(ctx, components.TriggerEventToAllRequestDto{\n        Name: \"<value>\",\n        Payload: map[string]any{\n            \"comment_id\": \"string\",\n            \"post\": map[string]any{\n                \"text\": \"string\",\n            },\n        },\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.TriggerEventResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.trigger_broadcast(trigger_event_to_all_request_dto={\n        \"name\": \"<value>\",\n        \"payload\": {\n            \"comment_id\": \"string\",\n            \"post\": {\n                \"text\": \"string\",\n            },\n        },\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/events/trigger/{transactionId}": {
      "delete": {
        "operationId": "EventsController_cancel",
        "x-speakeasy-group": "",
        "x-speakeasy-usage-example": {
          "title": "Cancel Triggered Event"
        },
        "x-speakeasy-name-override": "cancel",
        "summary": "Cancel triggered event",
        "description": "\n    Using a previously generated transactionId during the event trigger,\n     will cancel any active or pending workflows. This is useful to cancel active digests, delays etc...\n    ",
        "parameters": [
          {
            "name": "transactionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataBooleanDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Events"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.cancel(\"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->cancel(\n    transactionId: '<id>',\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->dataBooleanDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Cancel(ctx, \"<id>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.DataBooleanDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.cancel(transaction_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/notifications": {
      "get": {
        "operationId": "NotificationsController_listNotifications",
        "summary": "Get notifications",
        "parameters": [
          {
            "name": "channels",
            "required": false,
            "in": "query",
            "description": "Array of channel types",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChannelTypeEnum"
              }
            }
          },
          {
            "name": "templates",
            "required": false,
            "in": "query",
            "description": "Array of template IDs or a single template ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "emails",
            "required": false,
            "in": "query",
            "description": "Array of email addresses or a single email address",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "deprecated": true,
            "description": "Search term (deprecated)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberIds",
            "required": false,
            "in": "query",
            "description": "Array of subscriber IDs or a single subscriber ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "transactionId",
            "required": false,
            "in": "query",
            "description": "Transaction ID for filtering",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "required": false,
            "in": "query",
            "description": "Date filter for records after this timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "required": false,
            "in": "query",
            "description": "Date filter for records before this timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivitiesResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Notifications"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.notifications.list({});\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Operations;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\NotificationsControllerListNotificationsRequest();\n\n$response = $sdk->notifications->list(\n    request: $request\n);\n\nif ($response->activitiesResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Notifications.List(ctx, operations.NotificationsControllerListNotificationsRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ActivitiesResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.notifications.list(request={})\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/notifications/stats": {
      "get": {
        "operationId": "NotificationsController_getActivityStats",
        "x-speakeasy-group": "Notifications.Stats",
        "summary": "Get notification statistics",
        "parameters": [
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityStatsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Notifications"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.notifications.stats.retrieve();\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->notifications->stats->get(\n    idempotencyKey: '<value>'\n);\n\nif ($response->activityStatsResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Notifications.Stats.Retrieve(ctx, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ActivityStatsResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.notifications.stats.retrieve()\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/notifications/graph/stats": {
      "get": {
        "operationId": "NotificationsController_getActivityGraphStats",
        "x-speakeasy-name-override": "graph",
        "x-speakeasy-group": "Notifications.Stats",
        "summary": "Get notification graph statistics",
        "parameters": [
          {
            "name": "days",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityGraphStatesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Notifications"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.notifications.stats.graph();\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->notificationsStats->getGraph(\n    days: 517.81,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->activityGraphStatesResponses !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Notifications.Stats.Graph(ctx, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ActivityGraphStatesResponses != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.notifications.stats.graph()\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/notifications/{notificationId}": {
      "get": {
        "operationId": "NotificationsController_getNotification",
        "summary": "Get notification",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityNotificationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Notifications"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.notifications.retrieve(\"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->notifications->get(\n    notificationId: '<id>',\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->activityNotificationResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Notifications.Retrieve(ctx, \"<id>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ActivityNotificationResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.notifications.retrieve(notification_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/integrations": {
      "get": {
        "operationId": "IntegrationsController_listIntegrations",
        "summary": "Get integrations",
        "description": "Return all the integrations the user has created for that organization. Review v.0.17.0 changelog for a breaking change",
        "parameters": [
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of integrations belonging to the organization that are successfully returned.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Integrations"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.integrations.list();\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->integrations->list(\n    idempotencyKey: '<value>'\n);\n\nif ($response->integrationResponseDtos !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Integrations.List(ctx, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.IntegrationResponseDtos != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.integrations.list()\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "post": {
        "operationId": "IntegrationsController_createIntegration",
        "summary": "Create integration",
        "description": "Create an integration for the current environment the user is based on the API key provided",
        "parameters": [
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIntegrationRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Integrations"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.integrations.create({\n    providerId: \"<id>\",\n    channel: \"sms\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$createIntegrationRequestDto = new Components\\CreateIntegrationRequestDto(\n    providerId: '<id>',\n    channel: Components\\CreateIntegrationRequestDtoChannel::Sms,\n);\n\n$response = $sdk->integrations->create(\n    createIntegrationRequestDto: $createIntegrationRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->integrationResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Integrations.Create(ctx, components.CreateIntegrationRequestDto{\n        ProviderID: \"<id>\",\n        Channel: components.CreateIntegrationRequestDtoChannelSms,\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.IntegrationResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import novu_py\nfrom novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.integrations.create(create_integration_request_dto={\n        \"provider_id\": \"<id>\",\n        \"channel\": novu_py.CreateIntegrationRequestDtoChannel.SMS,\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/integrations/active": {
      "get": {
        "operationId": "IntegrationsController_getActiveIntegrations",
        "x-speakeasy-name-override": "listActive",
        "summary": "Get active integrations",
        "description": "Return all the active integrations the user has created for that organization. Review v.0.17.0 changelog for a breaking change",
        "parameters": [
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of active integrations belonging to the organization that are successfully returned.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Integrations"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.integrations.listActive();\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->integrations->listActive(\n    idempotencyKey: '<value>'\n);\n\nif ($response->integrationResponseDtos !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Integrations.ListActive(ctx, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.IntegrationResponseDtos != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.integrations.list_active()\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/integrations/webhook/provider/{providerOrIntegrationId}/status": {
      "get": {
        "operationId": "IntegrationsController_getWebhookSupportStatus",
        "x-speakeasy-group": "Integrations.Webhooks",
        "summary": "Get webhook support status for provider",
        "description": "Return the status of the webhook for this provider, if it is supported or if it is not based on a boolean value",
        "parameters": [
          {
            "name": "providerOrIntegrationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The status of the webhook for the provider requested",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Integrations"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.integrations.webhooks.retrieve(\"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->integrations->webhooks->getSupportStatus(\n    providerOrIntegrationId: '<id>',\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->boolean !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Integrations.Webhooks.Retrieve(ctx, \"<id>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Boolean != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.integrations.webhooks.retrieve(provider_or_integration_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/integrations/{integrationId}": {
      "put": {
        "operationId": "IntegrationsController_updateIntegrationById",
        "summary": "Update integration",
        "parameters": [
          {
            "name": "integrationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIntegrationRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "The integration with the integrationId provided does not exist in the database.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Integrations"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.integrations.update({}, \"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$updateIntegrationRequestDto = new Components\\UpdateIntegrationRequestDto();\n\n$response = $sdk->integrations->update(\n    integrationId: '<id>',\n    updateIntegrationRequestDto: $updateIntegrationRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->integrationResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Integrations.Update(ctx, \"<id>\", components.UpdateIntegrationRequestDto{}, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.IntegrationResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.integrations.update(integration_id=\"<id>\", update_integration_request_dto={})\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "delete": {
        "operationId": "IntegrationsController_removeIntegration",
        "summary": "Delete integration",
        "parameters": [
          {
            "name": "integrationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Integrations"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.integrations.delete(\"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->integrations->delete(\n    integrationId: '<id>',\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->integrationResponseDtos !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Integrations.Delete(ctx, \"<id>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.IntegrationResponseDtos != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.integrations.delete(integration_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/integrations/{integrationId}/set-primary": {
      "post": {
        "operationId": "IntegrationsController_setIntegrationAsPrimary",
        "x-speakeasy-name-override": "setAsPrimary",
        "summary": "Set integration as primary",
        "parameters": [
          {
            "name": "integrationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "The integration with the integrationId provided does not exist in the database.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Integrations"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.integrations.setAsPrimary(\"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->integrations->setAsPrimary(\n    integrationId: '<id>',\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->integrationResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Integrations.SetAsPrimary(ctx, \"<id>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.IntegrationResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.integrations.set_as_primary(integration_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/subscribers": {
      "get": {
        "operationId": "SubscribersV1Controller_listSubscribers",
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "summary": "Get subscribers",
        "description": "Returns a list of subscribers, could paginated using the `page` and `limit` query parameter",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponseDto"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SubscriberResponseDto"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.list();\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$responses = $sdk->subscribers->list(\n    page: 7685.78,\n    limit: 10,\n    idempotencyKey: '<value>'\n\n);\n\n\nforeach ($responses as $response) {\n    if ($response->statusCode === 200) {\n        // handle response\n    }\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.List(ctx, nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.list()\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      }
    },
    "/v1/subscribers/bulk": {
      "post": {
        "operationId": "SubscribersV1Controller_bulkCreateSubscribers",
        "x-speakeasy-name-override": "createBulk",
        "summary": "Bulk create subscribers",
        "description": "\n      Using this endpoint you can create multiple subscribers at once, to avoid multiple calls to the API.\n      The bulk API is limited to 500 subscribers per request.\n    ",
        "parameters": [
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSubscriberCreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkCreateSubscriberResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.createBulk({\n    subscribers: [\n      {\n        subscriberId: \"<id>\",\n      },\n    ],\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$bulkSubscriberCreateDto = new Components\\BulkSubscriberCreateDto(\n    subscribers: [\n        new Components\\CreateSubscriberRequestDto(\n            subscriberId: '<id>',\n        ),\n    ],\n);\n\n$response = $sdk->subscribers->createBulk(\n    bulkSubscriberCreateDto: $bulkSubscriberCreateDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->bulkCreateSubscriberResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.CreateBulk(ctx, components.BulkSubscriberCreateDto{\n        Subscribers: []components.CreateSubscriberRequestDto{\n            components.CreateSubscriberRequestDto{\n                SubscriberID: \"<id>\",\n            },\n        },\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.BulkCreateSubscriberResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.create_bulk(bulk_subscriber_create_dto={\n        \"subscribers\": [\n            {\n                \"subscriber_id\": \"<id>\",\n            },\n        ],\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/credentials": {
      "put": {
        "operationId": "SubscribersV1Controller_updateSubscriberChannel",
        "x-speakeasy-group": "Subscribers.Credentials",
        "summary": "Update subscriber credentials",
        "description": "Subscriber credentials associated to the delivery methods such as slack and push tokens.",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriberChannelRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.credentials.update({\n    providerId: \"pushpad\",\n    credentials: {\n      webhookUrl: \"https://example.com/webhook\",\n      channel: \"general\",\n      deviceTokens: [\n        \"token1\",\n        \"token2\",\n        \"token3\",\n      ],\n      alertUid: \"12345-abcde\",\n      title: \"Critical Alert\",\n      imageUrl: \"https://example.com/image.png\",\n      state: \"resolved\",\n      externalUrl: \"https://example.com/details\",\n    },\n  }, \"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$updateSubscriberChannelRequestDto = new Components\\UpdateSubscriberChannelRequestDto(\n    providerId: Components\\UpdateSubscriberChannelRequestDtoProviderId::PushWebhook,\n    credentials: new Components\\ChannelCredentials(\n        webhookUrl: 'https://example.com/webhook',\n        channel: 'general',\n        deviceTokens: [\n            'token1',\n            'token2',\n            'token3',\n        ],\n        alertUid: '12345-abcde',\n        title: 'Critical Alert',\n        imageUrl: 'https://example.com/image.png',\n        state: 'resolved',\n        externalUrl: 'https://example.com/details',\n    ),\n);\n\n$response = $sdk->subscribers->updateCredentials(\n    subscriberId: '<id>',\n    updateSubscriberChannelRequestDto: $updateSubscriberChannelRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->subscriberResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Credentials.Update(ctx, \"<id>\", components.UpdateSubscriberChannelRequestDto{\n        ProviderID: components.UpdateSubscriberChannelRequestDtoProviderIDPushpad,\n        Credentials: components.ChannelCredentials{\n            WebhookURL: novugo.String(\"https://example.com/webhook\"),\n            Channel: novugo.String(\"general\"),\n            DeviceTokens: []string{\n                \"token1\",\n                \"token2\",\n                \"token3\",\n            },\n            AlertUID: novugo.String(\"12345-abcde\"),\n            Title: novugo.String(\"Critical Alert\"),\n            ImageURL: novugo.String(\"https://example.com/image.png\"),\n            State: novugo.String(\"resolved\"),\n            ExternalURL: novugo.String(\"https://example.com/details\"),\n        },\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.SubscriberResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import novu_py\nfrom novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.credentials.update(subscriber_id=\"<id>\", update_subscriber_channel_request_dto={\n        \"provider_id\": novu_py.UpdateSubscriberChannelRequestDtoProviderID.PUSHPAD,\n        \"credentials\": {\n            \"webhook_url\": \"https://example.com/webhook\",\n            \"channel\": \"general\",\n            \"device_tokens\": [\n                \"token1\",\n                \"token2\",\n                \"token3\",\n            ],\n            \"alert_uid\": \"12345-abcde\",\n            \"title\": \"Critical Alert\",\n            \"image_url\": \"https://example.com/image.png\",\n            \"state\": \"resolved\",\n            \"external_url\": \"https://example.com/details\",\n        },\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "operationId": "SubscribersV1Controller_modifySubscriberChannel",
        "x-speakeasy-name-override": "append",
        "x-speakeasy-group": "Subscribers.Credentials",
        "summary": "Modify subscriber credentials",
        "description": "Subscriber credentials associated to the delivery methods such as slack and push tokens.\n    This endpoint appends provided credentials and deviceTokens to the existing ones.",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriberChannelRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.credentials.append({\n    providerId: \"zulip\",\n    credentials: {\n      webhookUrl: \"https://example.com/webhook\",\n      channel: \"general\",\n      deviceTokens: [\n        \"token1\",\n        \"token2\",\n        \"token3\",\n      ],\n      alertUid: \"12345-abcde\",\n      title: \"Critical Alert\",\n      imageUrl: \"https://example.com/image.png\",\n      state: \"resolved\",\n      externalUrl: \"https://example.com/details\",\n    },\n  }, \"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$updateSubscriberChannelRequestDto = new Components\\UpdateSubscriberChannelRequestDto(\n    providerId: Components\\UpdateSubscriberChannelRequestDtoProviderId::Zulip,\n    credentials: new Components\\ChannelCredentials(\n        webhookUrl: 'https://example.com/webhook',\n        channel: 'general',\n        deviceTokens: [\n            'token1',\n            'token2',\n            'token3',\n        ],\n        alertUid: '12345-abcde',\n        title: 'Critical Alert',\n        imageUrl: 'https://example.com/image.png',\n        state: 'resolved',\n        externalUrl: 'https://example.com/details',\n    ),\n);\n\n$response = $sdk->subscribersCredentials->append(\n    subscriberId: '<id>',\n    updateSubscriberChannelRequestDto: $updateSubscriberChannelRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->subscriberResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Credentials.Append(ctx, \"<id>\", components.UpdateSubscriberChannelRequestDto{\n        ProviderID: components.UpdateSubscriberChannelRequestDtoProviderIDZulip,\n        Credentials: components.ChannelCredentials{\n            WebhookURL: novugo.String(\"https://example.com/webhook\"),\n            Channel: novugo.String(\"general\"),\n            DeviceTokens: []string{\n                \"token1\",\n                \"token2\",\n                \"token3\",\n            },\n            AlertUID: novugo.String(\"12345-abcde\"),\n            Title: novugo.String(\"Critical Alert\"),\n            ImageURL: novugo.String(\"https://example.com/image.png\"),\n            State: novugo.String(\"resolved\"),\n            ExternalURL: novugo.String(\"https://example.com/details\"),\n        },\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.SubscriberResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import novu_py\nfrom novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.credentials.append(subscriber_id=\"<id>\", update_subscriber_channel_request_dto={\n        \"provider_id\": novu_py.UpdateSubscriberChannelRequestDtoProviderID.ZULIP,\n        \"credentials\": {\n            \"webhook_url\": \"https://example.com/webhook\",\n            \"channel\": \"general\",\n            \"device_tokens\": [\n                \"token1\",\n                \"token2\",\n                \"token3\",\n            ],\n            \"alert_uid\": \"12345-abcde\",\n            \"title\": \"Critical Alert\",\n            \"image_url\": \"https://example.com/image.png\",\n            \"state\": \"resolved\",\n            \"external_url\": \"https://example.com/details\",\n        },\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/credentials/{providerId}": {
      "delete": {
        "operationId": "SubscribersV1Controller_deleteSubscriberCredentials",
        "x-speakeasy-group": "Subscribers.Credentials",
        "summary": "Delete subscriber credentials by providerId",
        "description": "Delete subscriber credentials such as slack and expo tokens.",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "description": ""
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.credentials.delete(\"<id>\", \"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->subscribersCredentials->deleteProvider(\n    subscriberId: '<id>',\n    providerId: '<id>',\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Credentials.Delete(ctx, \"<id>\", \"<id>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.credentials.delete(subscriber_id=\"<id>\", provider_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/online-status": {
      "patch": {
        "operationId": "SubscribersV1Controller_updateSubscriberOnlineFlag",
        "x-speakeasy-name-override": "updateOnlineFlag",
        "x-speakeasy-group": "Subscribers.properties",
        "summary": "Update subscriber online status",
        "description": "Used to update the subscriber isOnline flag.",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriberOnlineFlagRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.properties.updateOnlineFlag({\n    isOnline: false,\n  }, \"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$updateSubscriberOnlineFlagRequestDto = new Components\\UpdateSubscriberOnlineFlagRequestDto(\n    isOnline: false,\n);\n\n$response = $sdk->subscribers->updateOnlineStatus(\n    subscriberId: '<id>',\n    updateSubscriberOnlineFlagRequestDto: $updateSubscriberOnlineFlagRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->subscriberResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Properties.UpdateOnlineFlag(ctx, \"<id>\", components.UpdateSubscriberOnlineFlagRequestDto{\n        IsOnline: false,\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.SubscriberResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.properties.update_online_flag(subscriber_id=\"<id>\", update_subscriber_online_flag_request_dto={\n        \"is_online\": False,\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/notifications/feed": {
      "get": {
        "operationId": "SubscribersV1Controller_getNotificationsFeed",
        "x-speakeasy-name-override": "feed",
        "x-speakeasy-group": "Subscribers.Notifications",
        "summary": "Get in-app notification feed for a particular subscriber",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "read",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "seen",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "payload",
            "required": false,
            "in": "query",
            "description": "Base64 encoded string of the partial payload JSON object",
            "example": "btoa(JSON.stringify({ foo: 123 })) results in base64 encoded string like eyJmb28iOjEyM30=",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.notifications.feed({\n    subscriberId: \"<id>\",\n    payload: \"btoa(JSON.stringify({ foo: 123 })) results in base64 encoded string like eyJmb28iOjEyM30=\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Operations;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\SubscribersV1ControllerGetNotificationsFeedRequest(\n    subscriberId: '<id>',\n    payload: 'btoa(JSON.stringify({ foo: 123 })) results in base64 encoded string like eyJmb28iOjEyM30=',\n);\n\n$response = $sdk->subscribers->notifications->getFeed(\n    request: $request\n);\n\nif ($response->feedResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Notifications.Feed(ctx, operations.SubscribersV1ControllerGetNotificationsFeedRequest{\n        SubscriberID: \"<id>\",\n        Payload: novugo.String(\"btoa(JSON.stringify({ foo: 123 })) results in base64 encoded string like eyJmb28iOjEyM30=\"),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.FeedResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.notifications.feed(request={\n        \"subscriber_id\": \"<id>\",\n        \"payload\": \"btoa(JSON.stringify({ foo: 123 })) results in base64 encoded string like eyJmb28iOjEyM30=\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/notifications/unseen": {
      "get": {
        "operationId": "SubscribersV1Controller_getUnseenCount",
        "x-speakeasy-name-override": "unseenCount",
        "x-speakeasy-group": "Subscribers.Notifications",
        "summary": "Get the unseen in-app notifications count for subscribers feed",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "seen",
            "required": false,
            "in": "query",
            "description": "Indicates whether to count seen notifications.",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The maximum number of notifications to return.",
            "schema": {
              "default": 100,
              "type": "number"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnseenCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.notifications.unseenCount({\n    subscriberId: \"<id>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->subscribersNotifications->getUnseenCount(\n    subscriberId: '<id>',\n    seen: false,\n    limit: 100,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->unseenCountResponse !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Notifications.UnseenCount(ctx, \"<id>\", nil, nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.UnseenCountResponse != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.notifications.unseen_count(subscriber_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/messages/mark-as": {
      "post": {
        "operationId": "SubscribersV1Controller_markMessagesAs",
        "x-speakeasy-name-override": "markAllAs",
        "x-speakeasy-group": "Subscribers.Messages",
        "summary": "Mark a subscriber messages as seen, read, unseen or unread",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageMarkAsRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.messages.markAllAs({\n    messageId: \"<id>\",\n    markAs: \"unread\",\n  }, \"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$messageMarkAsRequestDto = new Components\\MessageMarkAsRequestDto(\n    messageId: '<id>',\n    markAs: Components\\MarkAs::Unread,\n);\n\n$response = $sdk->subscribers->messages->markAllAs(\n    subscriberId: '<id>',\n    messageMarkAsRequestDto: $messageMarkAsRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->messageResponseDtos !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Messages.MarkAllAs(ctx, \"<id>\", components.MessageMarkAsRequestDto{\n        MessageID: components.CreateMessageIDStr(\n            \"<id>\",\n        ),\n        MarkAs: components.MarkAsUnread,\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.MessageResponseDtos != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import novu_py\nfrom novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.messages.mark_all_as(subscriber_id=\"<id>\", message_mark_as_request_dto={\n        \"message_id\": \"<id>\",\n        \"mark_as\": novu_py.MarkAs.UNREAD,\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/messages/mark-all": {
      "post": {
        "operationId": "SubscribersV1Controller_markAllUnreadAsRead",
        "x-speakeasy-name-override": "markAll",
        "x-speakeasy-group": "Subscribers.Messages",
        "summary": "Marks all the subscriber messages as read, unread, seen or unseen. Optionally you can pass feed id (or array) to mark messages of a particular feed.",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkAllMessageAsRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.messages.markAll({\n    markAs: \"seen\",\n  }, \"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$markAllMessageAsRequestDto = new Components\\MarkAllMessageAsRequestDto(\n    markAs: Components\\MarkAllMessageAsRequestDtoMarkAs::Seen,\n);\n\n$response = $sdk->subscribersMessages->markAll(\n    subscriberId: '<id>',\n    markAllMessageAsRequestDto: $markAllMessageAsRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->number !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Messages.MarkAll(ctx, \"<id>\", components.MarkAllMessageAsRequestDto{\n        MarkAs: components.MarkAllMessageAsRequestDtoMarkAsSeen,\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Number != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import novu_py\nfrom novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.messages.mark_all(subscriber_id=\"<id>\", mark_all_message_as_request_dto={\n        \"mark_as\": novu_py.MarkAllMessageAsRequestDtoMarkAs.SEEN,\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}": {
      "post": {
        "operationId": "SubscribersV1Controller_markActionAsSeen",
        "x-speakeasy-name-override": "updateAsSeen",
        "x-speakeasy-group": "Subscribers.Messages",
        "summary": "Mark message action as seen",
        "parameters": [
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {}
          },
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkMessageActionAsSeenDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.messages.updateAsSeen({\n    messageId: \"<id>\",\n    type: \"<value>\",\n    subscriberId: \"<id>\",\n    markMessageActionAsSeenDto: {\n      status: \"done\",\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\nuse novu\\Models\\Operations;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\SubscribersV1ControllerMarkActionAsSeenRequest(\n    messageId: '<id>',\n    type: '<value>',\n    subscriberId: '<id>',\n    markMessageActionAsSeenDto: new Components\\MarkMessageActionAsSeenDto(\n        status: Components\\MarkMessageActionAsSeenDtoStatus::Done,\n    ),\n);\n\n$response = $sdk->subscribers->messages->updateAsSeen(\n    request: $request\n);\n\nif ($response->messageResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"github.com/novuhq/novu-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Messages.UpdateAsSeen(ctx, operations.SubscribersV1ControllerMarkActionAsSeenRequest{\n        MessageID: \"<id>\",\n        Type: \"<value>\",\n        SubscriberID: \"<id>\",\n        MarkMessageActionAsSeenDto: components.MarkMessageActionAsSeenDto{\n            Status: components.MarkMessageActionAsSeenDtoStatusDone,\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.MessageResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import novu_py\nfrom novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.messages.update_as_seen(request={\n        \"message_id\": \"<id>\",\n        \"type\": \"<value>\",\n        \"subscriber_id\": \"<id>\",\n        \"mark_message_action_as_seen_dto\": {\n            \"status\": novu_py.MarkMessageActionAsSeenDtoStatus.DONE,\n        },\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/credentials/{providerId}/oauth/callback": {
      "get": {
        "operationId": "SubscribersV1Controller_chatOauthCallback",
        "x-speakeasy-name-override": "chatAccessOauthCallBack",
        "x-speakeasy-group": "Subscribers.Authentication",
        "summary": "Handle providers oauth redirect",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "schema": {}
          },
          {
            "name": "hmacHash",
            "required": true,
            "in": "query",
            "description": "HMAC hash for the request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentId",
            "required": true,
            "in": "query",
            "description": "The ID of the environment, must be a valid MongoDB ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integrationIdentifier",
            "required": false,
            "in": "query",
            "description": "Optional integration identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "required": true,
            "in": "query",
            "description": "Optional authorization code returned from the OAuth provider",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns plain text response.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            }
          },
          "302": {
            "description": "Redirects to the specified URL.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Location": {
                "description": "The URL to redirect to.",
                "schema": {
                  "type": "string",
                  "example": "https://www.novu.co"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.authentication.chatAccessOauthCallBack({\n    subscriberId: \"<id>\",\n    providerId: \"<id>\",\n    hmacHash: \"<value>\",\n    environmentId: \"<id>\",\n    code: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Operations;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\SubscribersV1ControllerChatOauthCallbackRequest(\n    subscriberId: '<id>',\n    providerId: '<value>',\n    hmacHash: '<value>',\n    environmentId: '<id>',\n    code: '<value>',\n);\n\n$response = $sdk->subscribers->authentication->handleOauthCallback(\n    request: $request\n);\n\nif ($response->res !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Authentication.ChatAccessOauthCallBack(ctx, operations.SubscribersV1ControllerChatOauthCallbackRequest{\n        SubscriberID: \"<id>\",\n        ProviderID: \"<id>\",\n        HmacHash: \"<value>\",\n        EnvironmentID: \"<id>\",\n        Code: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Res != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.authentication.chat_access_oauth_call_back(request={\n        \"subscriber_id\": \"<id>\",\n        \"provider_id\": \"<id>\",\n        \"hmac_hash\": \"<value>\",\n        \"environment_id\": \"<id>\",\n        \"code\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/subscribers/{subscriberId}/credentials/{providerId}/oauth": {
      "get": {
        "operationId": "SubscribersV1Controller_chatAccessOauth",
        "x-speakeasy-name-override": "chatAccessOauth",
        "x-speakeasy-group": "Subscribers.Authentication",
        "summary": "Handle chat oauth",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "schema": {}
          },
          {
            "name": "hmacHash",
            "required": true,
            "in": "query",
            "description": "HMAC hash for the request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentId",
            "required": true,
            "in": "query",
            "description": "The ID of the environment, must be a valid MongoDB ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integrationIdentifier",
            "required": false,
            "in": "query",
            "description": "Optional integration identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.authentication.chatAccessOauth({\n    subscriberId: \"<id>\",\n    providerId: \"<id>\",\n    hmacHash: \"<value>\",\n    environmentId: \"<id>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Operations;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\SubscribersV1ControllerChatAccessOauthRequest(\n    subscriberId: '<id>',\n    providerId: '<value>',\n    hmacHash: '<value>',\n    environmentId: '<id>',\n);\n\n$response = $sdk->subscribersAuthentication->chatAccessOauth(\n    request: $request\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Authentication.ChatAccessOauth(ctx, operations.SubscribersV1ControllerChatAccessOauthRequest{\n        SubscriberID: \"<id>\",\n        ProviderID: \"<id>\",\n        HmacHash: \"<value>\",\n        EnvironmentID: \"<id>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.authentication.chat_access_oauth(request={\n        \"subscriber_id\": \"<id>\",\n        \"provider_id\": \"<id>\",\n        \"hmac_hash\": \"<value>\",\n        \"environment_id\": \"<id>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v2/subscribers": {
      "get": {
        "operationId": "SubscribersController_searchSubscribers",
        "x-speakeasy-name-override": "search",
        "summary": "Search for subscribers",
        "parameters": [
          {
            "name": "after",
            "required": false,
            "in": "query",
            "description": "Cursor for pagination indicating the starting point after which to fetch results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "required": false,
            "in": "query",
            "description": "Cursor for pagination indicating the ending point before which to fetch results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "Email address of the subscriber to filter results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Name of the subscriber to filter results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "description": "Phone number of the subscriber to filter results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberId",
            "required": false,
            "in": "query",
            "description": "Unique identifier of the subscriber to filter results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "orderDirection",
            "required": false,
            "in": "query",
            "schema": {
              "enum": ["ASC", "DESC"],
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "schema": {}
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSubscribersResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.search({});\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Operations;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\SubscribersControllerSearchSubscribersRequest();\n\n$response = $sdk->subscribers->search(\n    request: $request\n);\n\nif ($response->listSubscribersResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Search(ctx, operations.SubscribersControllerSearchSubscribersRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListSubscribersResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.search()\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "post": {
        "operationId": "SubscribersController_createSubscriber",
        "x-speakeasy-name-override": "create",
        "summary": "Create subscriber",
        "description": "Create subscriber with the given data",
        "parameters": [
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriberRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.create({\n    subscriberId: \"<id>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          }
        ]
      }
    },
    "/v2/subscribers/{subscriberId}": {
      "get": {
        "operationId": "SubscribersController_getSubscriber",
        "x-speakeasy-name-override": "retrieve",
        "summary": "Get subscriber",
        "description": "Get subscriber by your internal id used to identify the subscriber",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.retrieve(\"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->subscribers->get(\n    subscriberId: '<id>',\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->subscriberResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Retrieve(ctx, \"<id>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.SubscriberResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.retrieve(subscriber_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "operationId": "SubscribersController_patchSubscriber",
        "x-speakeasy-name-override": "patch",
        "summary": "Patch subscriber",
        "description": "Patch subscriber by your internal id used to identify the subscriber",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchSubscriberRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.patch({}, \"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$patchSubscriberRequestDto = new Components\\PatchSubscriberRequestDto();\n\n$response = $sdk->subscribers->patch(\n    subscriberId: '<id>',\n    patchSubscriberRequestDto: $patchSubscriberRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->subscriberResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Patch(ctx, \"<id>\", components.PatchSubscriberRequestDto{}, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.SubscriberResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.patch(subscriber_id=\"<id>\", patch_subscriber_request_dto={})\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "delete": {
        "operationId": "SubscribersController_removeSubscriber",
        "x-speakeasy-name-override": "delete",
        "summary": "Delete subscriber",
        "description": "Deletes a subscriber entity from the Novu platform",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveSubscriberResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.delete(\"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->subscribers->delete(\n    subscriberId: '<id>',\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->removeSubscriberResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Delete(ctx, \"<id>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.RemoveSubscriberResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.delete(subscriber_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v2/subscribers/{subscriberId}/preferences": {
      "get": {
        "operationId": "SubscribersController_getSubscriberPreferences",
        "x-speakeasy-name-override": "list",
        "x-speakeasy-group": "Subscribers.Preferences",
        "summary": "Get subscriber preferences",
        "description": "Get subscriber global and workflow specific preferences",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubscriberPreferencesDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.preferences.list(\"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->subscribersPreferences->retrieve(\n    subscriberId: '<id>',\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->getSubscriberPreferencesDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Preferences.Retrieve(ctx, \"<id>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.GetSubscriberPreferencesDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.preferences.retrieve(subscriber_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "operationId": "SubscribersController_updateSubscriberPreferences",
        "x-speakeasy-name-override": "update",
        "x-speakeasy-group": "Subscribers.Preferences",
        "summary": "Update subscriber global or workflow specific preferences",
        "description": "Update subscriber global or workflow specific preferences",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchSubscriberPreferencesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubscriberPreferencesDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Subscribers"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.subscribers.preferences.update({\n    channels: {},\n  }, \"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$patchSubscriberPreferencesDto = new Components\\PatchSubscriberPreferencesDto(\n    channels: new Components\\PatchPreferenceChannelsDto(),\n);\n\n$response = $sdk->subscribers->updatePreferences(\n    subscriberId: '<id>',\n    patchSubscriberPreferencesDto: $patchSubscriberPreferencesDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->getSubscriberPreferencesDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Subscribers.Preferences.Update(ctx, \"<id>\", components.PatchSubscriberPreferencesDto{\n        Channels: components.PatchPreferenceChannelsDto{},\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.GetSubscriberPreferencesDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.subscribers.preferences.update(subscriber_id=\"<id>\", patch_subscriber_preferences_dto={\n        \"channels\": {},\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/messages": {
      "get": {
        "operationId": "MessagesController_getMessages",
        "summary": "Get messages",
        "description": "Returns a list of messages, could paginate using the `page` query parameter",
        "parameters": [
          {
            "name": "channel",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ChannelTypeEnum"
            }
          },
          {
            "name": "subscriberId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivitiesResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Messages"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.messages.retrieve({});\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Operations;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$request = new Operations\\MessagesControllerGetMessagesRequest();\n\n$response = $sdk->messages->get(\n    request: $request\n);\n\nif ($response->activitiesResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Messages.Retrieve(ctx, operations.MessagesControllerGetMessagesRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ActivitiesResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.messages.retrieve(request={})\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/messages/{messageId}": {
      "delete": {
        "operationId": "MessagesController_deleteMessage",
        "summary": "Delete message",
        "description": "Deletes a message entity from the Novu platform",
        "parameters": [
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteMessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Messages"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.messages.delete(\"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->messages->delete(\n    messageId: '<id>',\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->deleteMessageResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Messages.Delete(ctx, \"<id>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.DeleteMessageResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.messages.delete(message_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/messages/transaction/{transactionId}": {
      "delete": {
        "operationId": "MessagesController_deleteMessagesByTransactionId",
        "x-speakeasy-name-override": "deleteByTransactionId",
        "summary": "Delete messages by transactionId",
        "description": "Deletes messages entity from the Novu platform using TransactionId of message",
        "parameters": [
          {
            "name": "channel",
            "required": false,
            "in": "query",
            "description": "The channel of the message to be deleted",
            "schema": {
              "enum": ["in_app", "email", "sms", "chat", "push"],
              "type": "string"
            }
          },
          {
            "name": "transactionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "description": ""
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Messages"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.messages.deleteByTransactionId(\"<id>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Operations;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->messages->deleteByTransactionId(\n    transactionId: '<id>',\n    channel: Operations\\Channel::Push,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Messages.DeleteByTransactionID(ctx, \"<id>\", nil, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.messages.delete_by_transaction_id(transaction_id=\"<id>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/topics": {
      "post": {
        "operationId": "TopicsController_createTopic",
        "summary": "Topic creation",
        "description": "Create a topic",
        "parameters": [
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTopicRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTopicResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Topics"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.topics.create({\n    key: \"<key>\",\n    name: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$createTopicRequestDto = new Components\\CreateTopicRequestDto(\n    key: '<key>',\n    name: '<value>',\n);\n\n$response = $sdk->topics->create(\n    createTopicRequestDto: $createTopicRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->createTopicResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Topics.Create(ctx, components.CreateTopicRequestDto{\n        Key: \"<key>\",\n        Name: \"<value>\",\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.CreateTopicResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.topics.create(create_topic_request_dto={\n        \"key\": \"<key>\",\n        \"name\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "get": {
        "operationId": "TopicsController_listTopics",
        "summary": "Get topic list filtered ",
        "description": "Returns a list of topics that can be paginated using the `page` query parameter and filtered by the topic key with the `key` query parameter",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "example": 0,
            "description": "The page number to retrieve (starts from 0)",
            "schema": {
              "format": "int64",
              "default": 0,
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "example": 10,
            "description": "The number of items to return per page (default: 10)",
            "schema": {
              "format": "int64",
              "default": 10,
              "type": "integer"
            }
          },
          {
            "name": "key",
            "required": false,
            "in": "query",
            "example": "exampleKey",
            "description": "A filter key to apply to the results",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterTopicsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Topics"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.topics.list({\n    key: \"exampleKey\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->topics->list(\n    page: 0,\n    pageSize: 10,\n    key: 'exampleKey',\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->filterTopicsResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Topics.List(ctx, nil, nil, novugo.String(\"exampleKey\"), nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.FilterTopicsResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.topics.list(key=\"exampleKey\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/topics/{topicKey}/subscribers": {
      "post": {
        "operationId": "TopicsController_assign",
        "x-speakeasy-name-override": "assign",
        "x-speakeasy-group": "Topics.Subscribers",
        "summary": "Subscribers addition",
        "description": "Add subscribers to a topic by key",
        "parameters": [
          {
            "name": "topicKey",
            "required": true,
            "in": "path",
            "description": "The topic key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSubscribersRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignSubscriberToTopicDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Topics"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.topics.subscribers.assign({\n    subscribers: [\n      \"<value>\",\n      \"<value>\",\n      \"<value>\",\n    ],\n  }, \"<value>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$addSubscribersRequestDto = new Components\\AddSubscribersRequestDto(\n    subscribers: [\n        '<value>',\n    ],\n);\n\n$response = $sdk->topics->subscribers->assign(\n    topicKey: '<value>',\n    addSubscribersRequestDto: $addSubscribersRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->assignSubscriberToTopicDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Topics.Subscribers.Assign(ctx, \"<value>\", components.AddSubscribersRequestDto{\n        Subscribers: []string{\n            \"<value>\",\n            \"<value>\",\n            \"<value>\",\n        },\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.AssignSubscriberToTopicDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.topics.subscribers.assign(topic_key=\"<value>\", add_subscribers_request_dto={\n        \"subscribers\": [\n            \"<value>\",\n            \"<value>\",\n            \"<value>\",\n        ],\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/topics/{topicKey}/subscribers/{externalSubscriberId}": {
      "get": {
        "operationId": "TopicsController_getTopicSubscriber",
        "x-speakeasy-group": "Topics.Subscribers",
        "summary": "Check topic subscriber",
        "description": "Check if a subscriber belongs to a certain topic",
        "parameters": [
          {
            "name": "externalSubscriberId",
            "required": true,
            "in": "path",
            "description": "The external subscriber id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topicKey",
            "required": true,
            "in": "path",
            "description": "The topic key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicSubscriberDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Topics"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.topics.subscribers.retrieve(\"<id>\", \"<value>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->topicsSubscribers->check(\n    externalSubscriberId: '<id>',\n    topicKey: '<value>',\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->topicSubscriberDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Topics.Subscribers.Retrieve(ctx, \"<id>\", \"<value>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.TopicSubscriberDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.topics.subscribers.retrieve(external_subscriber_id=\"<id>\", topic_key=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/topics/{topicKey}/subscribers/removal": {
      "post": {
        "operationId": "TopicsController_removeSubscribers",
        "x-speakeasy-name-override": "remove",
        "x-speakeasy-group": "Topics.Subscribers",
        "summary": "Subscribers removal",
        "description": "Remove subscribers from a topic",
        "parameters": [
          {
            "name": "topicKey",
            "required": true,
            "in": "path",
            "description": "The topic key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveSubscribersRequestDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "description": ""
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Topics"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.topics.subscribers.remove({\n    subscribers: [\n      \"<value>\",\n      \"<value>\",\n    ],\n  }, \"<value>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$removeSubscribersRequestDto = new Components\\RemoveSubscribersRequestDto(\n    subscribers: [\n        '<value>',\n    ],\n);\n\n$response = $sdk->topics->subscribers->remove(\n    topicKey: '<value>',\n    removeSubscribersRequestDto: $removeSubscribersRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Topics.Subscribers.Remove(ctx, \"<value>\", components.RemoveSubscribersRequestDto{\n        Subscribers: []string{\n            \"<value>\",\n            \"<value>\",\n        },\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.topics.subscribers.remove(topic_key=\"<value>\", remove_subscribers_request_dto={\n        \"subscribers\": [\n            \"<value>\",\n            \"<value>\",\n        ],\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/topics/{topicKey}": {
      "delete": {
        "operationId": "TopicsController_deleteTopic",
        "summary": "Delete topic",
        "description": "Delete a topic by its topic key if it has no subscribers",
        "parameters": [
          {
            "name": "topicKey",
            "required": true,
            "in": "path",
            "description": "The topic key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The topic has been deleted correctly",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Topics"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.topics.delete(\"<value>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->topics->delete(\n    topicKey: '<value>',\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->statusCode === 200) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Topics.Delete(ctx, \"<value>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.topics.delete(topic_key=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "get": {
        "operationId": "TopicsController_getTopic",
        "summary": "Get topic",
        "description": "Get a topic by its topic key",
        "parameters": [
          {
            "name": "topicKey",
            "required": true,
            "in": "path",
            "description": "The topic key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTopicResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Topics"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.topics.retrieve(\"<value>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n\n\n$response = $sdk->topics->get(\n    topicKey: '<value>',\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->getTopicResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Topics.Retrieve(ctx, \"<value>\", nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.GetTopicResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.topics.retrieve(topic_key=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "operationId": "TopicsController_renameTopic",
        "x-speakeasy-name-override": "rename",
        "summary": "Rename a topic",
        "description": "Rename a topic by providing a new name",
        "parameters": [
          {
            "name": "topicKey",
            "required": true,
            "in": "path",
            "description": "The topic key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idempotency-key",
            "in": "header",
            "description": "A header for idempotency purposes",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameTopicRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenameTopicResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "414": {
            "description": "URI Too Long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "The client has sent too many requests in a given amount of time. ",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "API rate limit exceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimit-Limit"
              },
              "RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimit-Remaining"
              },
              "RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimit-Reset"
              },
              "RateLimit-Policy": {
                "$ref": "#/components/headers/RateLimit-Policy"
              },
              "Idempotency-Key": {
                "$ref": "#/components/headers/Idempotency-Key"
              },
              "Idempotency-Replay": {
                "$ref": "#/components/headers/Idempotency-Replay"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Please wait some time, then try again."
                }
              }
            }
          }
        },
        "tags": ["Topics"],
        "security": [
          {
            "secretKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nasync function run() {\n  const result = await novu.topics.rename({\n    name: \"<value>\",\n  }, \"<value>\");\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "declare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setSecurity(\n        '<YOUR_API_KEY_HERE>'\n    )\n    ->build();\n\n$renameTopicRequestDto = new Components\\RenameTopicRequestDto(\n    name: '<value>',\n);\n\n$response = $sdk->topics->rename(\n    topicKey: '<value>',\n    renameTopicRequestDto: $renameTopicRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->renameTopicResponseDto !== null) {\n    // handle response\n}"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := novugo.New(\n        novugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Topics.Rename(ctx, \"<value>\", components.RenameTopicRequestDto{\n        Name: \"<value>\",\n    }, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.RenameTopicResponseDto != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from novu_py import Novu\nimport os\n\nwith Novu(\n    secret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.topics.rename(topic_key=\"<value>\", rename_topic_request_dto={\n        \"name\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    }
  },
  "info": {
    "title": "Novu API",
    "description": "Novu REST API. Please see https://docs.novu.co/api-reference for more details.",
    "version": "1.0",
    "contact": {
      "name": "Novu Support",
      "url": "https://discord.gg/novu",
      "email": "support@novu.co"
    },
    "termsOfService": "https://novu.co/terms",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/license/mit"
    }
  },
  "tags": [
    {
      "name": "Events",
      "description": "Events represent a change in state of a subscriber. They are used to trigger workflows, and enable you to send notifications to subscribers based on their actions.",
      "externalDocs": {
        "url": "https://docs.novu.co/workflows"
      }
    },
    {
      "name": "Subscribers",
      "description": "A subscriber in Novu represents someone who should receive a message. A subscriber’s profile information contains important attributes about the subscriber that will be used in messages (name, email). The subscriber object can contain other key-value pairs that can be used to further personalize your messages.",
      "externalDocs": {
        "url": "https://docs.novu.co/subscribers/subscribers"
      }
    },
    {
      "name": "Topics",
      "description": "Topics are a way to group subscribers together so that they can be notified of events at once. A topic is identified by a custom key. This can be helpful for things like sending out marketing emails or notifying users of new features. Topics can also be used to send notifications to the subscribers who have been grouped together based on their interests, location, activities and much more.",
      "externalDocs": {
        "url": "https://docs.novu.co/subscribers/topics"
      }
    },
    {
      "name": "Notification",
      "description": "A notification conveys information from source to recipient, triggered by a workflow acting as a message blueprint. Notifications can be individual or bundled as digest for user-friendliness.",
      "externalDocs": {
        "url": "https://docs.novu.co/getting-started/introduction"
      }
    },
    {
      "name": "Integrations",
      "description": "With the help of the Integration Store, you can easily integrate your favorite delivery provider. During the runtime of the API, the Integrations Store is responsible for storing the configurations of all the providers.",
      "externalDocs": {
        "url": "https://docs.novu.co/channels-and-providers/integration-store"
      }
    },
    {
      "name": "Layouts",
      "description": "Novu allows the creation of layouts - a specific HTML design or structure to wrap content of email notifications. Layouts can be manipulated and assigned to new or existing workflows within the Novu platform, allowing users to create, manage, and assign these layouts to workflows, so they can be reused to structure the appearance of notifications sent through the platform.",
      "externalDocs": {
        "url": "https://docs.novu.co/content-creation-design/layouts"
      }
    },
    {
      "name": "Workflows",
      "description": "All notifications are sent via a workflow. Each workflow acts as a container for the logic and blueprint that are associated with a type of notification in your system.",
      "externalDocs": {
        "url": "https://docs.novu.co/workflows"
      }
    },
    {
      "name": "Notification Templates",
      "description": "Deprecated. Use Workflows (/workflows) instead, which provide the same functionality under a new name."
    },
    {
      "name": "Workflow groups",
      "description": "Workflow groups are used to organize workflows into logical groups."
    },
    {
      "name": "Changes",
      "description": "Changes represent a change in state of an environment. They are analagous to a pending pull request in git, enabling you to test changes before they are applied to your environment and atomically apply them when you are ready.",
      "externalDocs": {
        "url": "https://docs.novu.co/platform/environments#promoting-pending-changes-to-production"
      }
    },
    {
      "name": "Environments",
      "description": "Novu uses the concept of environments to ensure logical separation of your data and configuration. This means that subscribers, and preferences created in one environment are never accessible to another.",
      "externalDocs": {
        "url": "https://docs.novu.co/platform/environments"
      }
    },
    {
      "name": "Inbound Parse",
      "description": "Inbound Webhook is a feature that allows processing of incoming emails for a domain or subdomain. The feature parses the contents of the email and POSTs the information to a specified URL in a multipart/form-data format.",
      "externalDocs": {
        "url": "https://docs.novu.co/platform/inbound-parse-webhook"
      }
    },
    {
      "name": "Feeds",
      "description": "Novu provides a notification activity feed that monitors every outgoing message associated with its relevant metadata. This can be used to monitor activity and discover potential issues with a specific provider or a channel type.",
      "externalDocs": {
        "url": "https://docs.novu.co/activity-feed"
      }
    },
    {
      "name": "Tenants",
      "description": "A tenant represents a group of users. As a developer, when your apps have organizations, they are referred to as tenants. Tenants in Novu provides the ability to tailor specific notification experiences to users of different groups or organizations.",
      "externalDocs": {
        "url": "https://docs.novu.co/tenants"
      }
    },
    {
      "name": "Messages",
      "description": "A message in Novu represents a notification delivered to a recipient on a particular channel. Messages contain information about the request that triggered its delivery, a view of the data sent to the recipient, and a timeline of its lifecycle events. Learn more about messages.",
      "externalDocs": {
        "url": "https://docs.novu.co/workflows/messages"
      }
    },
    {
      "name": "Organizations",
      "description": "An organization serves as a separate entity within your Novu account. Each organization you create has its own separate integration store, workflows, subscribers, and API keys. This separation of resources allows you to manage multi-tenant environments and separate domains within a single account.",
      "externalDocs": {
        "url": "https://docs.novu.co/platform/organizations"
      }
    },
    {
      "name": "Execution Details",
      "description": "Execution details are used to track the execution of a workflow. They provided detailed information on the execution of a workflow, including the status of each step, the input and output of each step, and the overall status of the execution.",
      "externalDocs": {
        "url": "https://docs.novu.co/activity-feed"
      }
    },
    {
      "name": "Translations",
      "description": "Translations are used to localize your messages for different languages and regions. Novu provides a way to create and manage translations for your messages. You can create translations for your messages in different languages and regions, and assign them to your subscribers based on their preferences.",
      "externalDocs": {
        "url": "https://docs.novu.co/content-creation-design/translations"
      }
    }
  ],
  "servers": [
    {
      "url": "https://api.novu.co"
    },
    {
      "url": "https://eu.api.novu.co"
    }
  ],
  "components": {
    "securitySchemes": {
      "secretKey": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "API key authentication. Allowed headers-- \"Authorization: ApiKey <api_key>\".",
        "x-speakeasy-example": "YOUR_SECRET_KEY_HERE"
      }
    },
    "schemas": {
      "DataWrapperDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object"
          }
        },
        "required": ["data"]
      },
      "ErrorDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "HTTP status code of the error response.",
            "example": 404
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of when the error occurred.",
            "example": "2024-12-12T13:00:00Z"
          },
          "path": {
            "type": "string",
            "description": "The path where the error occurred.",
            "example": "/api/v1/resource"
          },
          "message": {
            "type": "string",
            "description": "A detailed error message.",
            "example": "Resource not found."
          },
          "ctx": {
            "type": "object",
            "description": "Optional context object for additional error details.",
            "additionalProperties": true,
            "example": {
              "workflowId": "some_wf_id",
              "stepId": "some_wf_id"
            }
          },
          "errorId": {
            "type": "string",
            "description": "Optional unique identifier for the error, useful for tracking using Sentry and \n      New Relic, only available for 500.",
            "example": "abc123"
          }
        },
        "required": ["statusCode", "timestamp", "path", "message"]
      },
      "ValidationErrorDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "HTTP status code of the error response.",
            "example": 404
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of when the error occurred.",
            "example": "2024-12-12T13:00:00Z"
          },
          "path": {
            "type": "string",
            "description": "The path where the error occurred.",
            "example": "/api/v1/resource"
          },
          "message": {
            "type": "string",
            "description": "A detailed error message.",
            "example": "Resource not found."
          },
          "ctx": {
            "type": "object",
            "description": "Optional context object for additional error details.",
            "additionalProperties": true,
            "example": {
              "workflowId": "some_wf_id",
              "stepId": "some_wf_id"
            }
          },
          "errorId": {
            "type": "string",
            "description": "Optional unique identifier for the error, useful for tracking using Sentry and \n      New Relic, only available for 500.",
            "example": "abc123"
          },
          "errors": {
            "type": "object",
            "description": "A record of validation errors keyed by field name",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "value": {
                  "oneOf": [
                    {
                      "type": "string",
                      "nullable": true
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "additionalProperties": true
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  ]
                }
              },
              "required": ["messages", "value"],
              "example": {
                "messages": ["Field is required", "Invalid format"],
                "value": "xx xx xx "
              }
            },
            "example": {
              "fieldName1": {
                "messages": ["Field is required", "Must be a valid email address"],
                "value": "invalidEmail"
              },
              "fieldName2": {
                "messages": ["Must be at least 18 years old"],
                "value": 17
              },
              "fieldName3": {
                "messages": ["Must be a boolean value"],
                "value": true
              },
              "fieldName4": {
                "messages": ["Must be a valid object"],
                "value": {
                  "key": "value"
                }
              }
            }
          }
        },
        "required": ["statusCode", "timestamp", "path", "message", "errors"]
      },
      "TriggerEventResponseDto": {
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "boolean",
            "description": "Indicates whether the trigger was acknowledged or not"
          },
          "status": {
            "enum": [
              "error",
              "trigger_not_active",
              "no_workflow_active_steps_defined",
              "no_workflow_steps_defined",
              "processed",
              "no_tenant_found"
            ],
            "type": "string",
            "description": "Status of the trigger"
          },
          "error": {
            "description": "In case of an error, this field will contain the error message(s)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "transactionId": {
            "type": "string",
            "description": "The returned transaction ID of the trigger"
          }
        },
        "required": ["acknowledged", "status"]
      },
      "ChannelCredentialsDto": {
        "type": "object",
        "properties": {
          "webhookUrl": {
            "type": "string",
            "description": "The URL for the webhook associated with the channel."
          },
          "deviceTokens": {
            "description": "An array of device tokens for push notifications.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SubscriberChannelDto": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string",
            "description": "The ID of the chat or push provider.",
            "enum": [
              "slack",
              "discord",
              "msteams",
              "mattermost",
              "ryver",
              "zulip",
              "grafana-on-call",
              "getstream",
              "rocket-chat",
              "whatsapp-business",
              "fcm",
              "apns",
              "expo",
              "one-signal",
              "pushpad",
              "push-webhook",
              "pusher-beams"
            ]
          },
          "integrationIdentifier": {
            "type": "string",
            "description": "An optional identifier for the integration."
          },
          "credentials": {
            "description": "Credentials for the channel.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelCredentialsDto"
              }
            ]
          }
        },
        "required": ["providerId", "credentials"]
      },
      "SubscriberPayloadDto": {
        "type": "object",
        "properties": {
          "subscriberId": {
            "type": "string",
            "description": "The internal identifier you used to create this subscriber, usually correlates to the id the user in your systems"
          },
          "email": {
            "type": "string",
            "description": "The email address of the subscriber."
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the subscriber."
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the subscriber."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the subscriber."
          },
          "avatar": {
            "type": "string",
            "description": "An HTTP URL to the profile image of your subscriber."
          },
          "locale": {
            "type": "string",
            "description": "The locale of the subscriber."
          },
          "data": {
            "type": "object",
            "description": "An optional payload object that can contain any properties.",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "channels": {
            "description": "An optional array of subscriber channels.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberChannelDto"
            }
          }
        },
        "required": ["subscriberId"]
      },
      "TenantPayloadDto": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "TriggerRecipientsTypeEnum": {
        "type": "string",
        "enum": ["Subscriber", "Topic"]
      },
      "TopicPayloadDto": {
        "type": "object",
        "properties": {
          "topicKey": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TriggerRecipientsTypeEnum"
          }
        },
        "required": ["topicKey", "type"]
      },
      "TriggerEventRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The trigger identifier of the workflow you wish to send. This identifier can be found on the workflow page.",
            "example": "workflow_identifier",
            "x-speakeasy-name-override": "workflowId"
          },
          "payload": {
            "type": "object",
            "description": "The payload object is used to pass additional custom information that could be \n    used to render the workflow, or perform routing rules based on it. \n      This data will also be available when fetching the notifications feed from the API to display certain parts of the UI.",
            "additionalProperties": true,
            "example": {
              "comment_id": "string",
              "post": {
                "text": "string"
              }
            }
          },
          "overrides": {
            "type": "object",
            "description": "This could be used to override provider specific configurations",
            "example": {
              "fcm": {
                "data": {
                  "key": "value"
                }
              }
            },
            "additionalProperties": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "to": {
            "description": "The recipients list of people who will receive the notification.",
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SubscriberPayloadDto"
                    },
                    {
                      "$ref": "#/components/schemas/TopicPayloadDto"
                    },
                    {
                      "type": "string",
                      "description": "Unique identifier of a subscriber in your systems",
                      "example": "SUBSCRIBER_ID"
                    }
                  ]
                }
              },
              {
                "type": "string",
                "description": "Unique identifier of a subscriber in your systems",
                "example": "SUBSCRIBER_ID"
              },
              {
                "$ref": "#/components/schemas/SubscriberPayloadDto"
              },
              {
                "$ref": "#/components/schemas/TopicPayloadDto"
              }
            ]
          },
          "transactionId": {
            "type": "string",
            "description": "A unique identifier for this transaction, we will generate a UUID if not provided."
          },
          "actor": {
            "description": "It is used to display the Avatar of the provided actor's subscriber id or actor object.\n    If a new actor object is provided, we will create a new subscriber in our system",
            "oneOf": [
              {
                "type": "string",
                "description": "Unique identifier of a subscriber in your systems"
              },
              {
                "$ref": "#/components/schemas/SubscriberPayloadDto"
              }
            ]
          },
          "tenant": {
            "description": "It is used to specify a tenant context during trigger event.\n    Existing tenants will be updated with the provided details.",
            "oneOf": [
              {
                "type": "string",
                "description": "Unique identifier of a tenant in your system"
              },
              {
                "$ref": "#/components/schemas/TenantPayloadDto"
              }
            ]
          }
        },
        "required": ["name", "to"]
      },
      "BulkTriggerEventDto": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TriggerEventRequestDto"
            }
          }
        },
        "required": ["events"]
      },
      "TriggerEventToAllRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The trigger identifier associated for the template you wish to send. This identifier can be found on the template page."
          },
          "payload": {
            "type": "object",
            "example": {
              "comment_id": "string",
              "post": {
                "text": "string"
              }
            },
            "description": "The payload object is used to pass additional information that \n    could be used to render the template, or perform routing rules based on it. \n      For In-App channel, payload data are also available in <Inbox />",
            "additionalProperties": true
          },
          "overrides": {
            "type": "object",
            "description": "This could be used to override provider specific configurations",
            "example": {
              "fcm": {
                "data": {
                  "key": "value"
                }
              }
            }
          },
          "transactionId": {
            "type": "string",
            "description": "A unique identifier for this transaction, we will generated a UUID if not provided."
          },
          "actor": {
            "description": "It is used to display the Avatar of the provided actor's subscriber id or actor object.\n    If a new actor object is provided, we will create a new subscriber in our system\n    ",
            "oneOf": [
              {
                "type": "string",
                "description": "Unique identifier of a subscriber in your systems"
              },
              {
                "$ref": "#/components/schemas/SubscriberPayloadDto"
              }
            ]
          },
          "tenant": {
            "description": "It is used to specify a tenant context during trigger event.\n    If a new tenant object is provided, we will create a new tenant.\n    ",
            "oneOf": [
              {
                "type": "string",
                "description": "Unique identifier of a tenant in your system"
              },
              {
                "$ref": "#/components/schemas/TenantPayloadDto"
              }
            ]
          }
        },
        "required": ["name", "payload"]
      },
      "DataBooleanDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "boolean"
          }
        },
        "required": ["data"]
      },
      "ChannelTypeEnum": {
        "type": "string",
        "description": "Channel type through which the message is sent",
        "enum": ["in_app", "email", "sms", "chat", "push"]
      },
      "StepTypeEnum": {
        "type": "string",
        "description": "Channels of the notification",
        "enum": ["in_app", "email", "sms", "chat", "push", "digest", "trigger", "delay", "custom"]
      },
      "ActivityNotificationSubscriberResponseDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of the subscriber"
          },
          "subscriberId": {
            "type": "string",
            "description": "External unique identifier of the subscriber"
          },
          "_id": {
            "type": "string",
            "description": "Internal to Novu unique identifier of the subscriber"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the subscriber"
          },
          "email": {
            "type": "string",
            "description": "Email address of the subscriber"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the subscriber"
          }
        },
        "required": ["subscriberId", "_id"]
      },
      "NotificationTriggerVariable": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the variable"
          }
        },
        "required": ["name"]
      },
      "NotificationTriggerDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["event"],
            "description": "Type of the trigger"
          },
          "identifier": {
            "type": "string",
            "description": "Identifier of the trigger"
          },
          "variables": {
            "description": "Variables of the trigger",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationTriggerVariable"
            }
          },
          "subscriberVariables": {
            "description": "Subscriber variables of the trigger",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationTriggerVariable"
            }
          }
        },
        "required": ["type", "identifier", "variables"]
      },
      "ActivityNotificationTemplateResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier of the template"
          },
          "name": {
            "type": "string",
            "description": "Name of the template"
          },
          "triggers": {
            "description": "Triggers of the template",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationTriggerDto"
            }
          }
        },
        "required": ["name", "triggers"]
      },
      "DigestTypeEnum": {
        "type": "string",
        "description": "The Digest Type",
        "enum": ["regular", "backoff", "timed"]
      },
      "DigestUnitEnum": {
        "type": "string",
        "description": "Regular digest: Unit for backoff",
        "enum": ["seconds", "minutes", "hours", "days", "weeks", "months"]
      },
      "OrdinalEnum": {
        "type": "string",
        "description": "Ordinal position for the digest",
        "enum": ["1", "2", "3", "4", "5", "last"]
      },
      "OrdinalValueEnum": {
        "type": "string",
        "description": "Value of the ordinal",
        "enum": [
          "day",
          "weekday",
          "weekend",
          "sunday",
          "monday",
          "tuesday",
          "wednesday",
          "thursday",
          "friday",
          "saturday"
        ]
      },
      "MonthlyTypeEnum": {
        "type": "string",
        "description": "Type of monthly schedule",
        "enum": ["each", "on"]
      },
      "DigestTimedConfigDto": {
        "type": "object",
        "properties": {
          "atTime": {
            "type": "string",
            "description": "Time at which the digest is triggered"
          },
          "weekDays": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
            },
            "description": "Days of the week for the digest"
          },
          "monthDays": {
            "description": "Specific days of the month for the digest",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "ordinal": {
            "$ref": "#/components/schemas/OrdinalEnum"
          },
          "ordinalValue": {
            "$ref": "#/components/schemas/OrdinalValueEnum"
          },
          "monthlyType": {
            "$ref": "#/components/schemas/MonthlyTypeEnum"
          },
          "cronExpression": {
            "type": "string",
            "description": "Cron expression for scheduling"
          }
        }
      },
      "DigestMetadataDto": {
        "type": "object",
        "properties": {
          "digestKey": {
            "type": "string",
            "description": "Optional key for the digest"
          },
          "amount": {
            "type": "number",
            "description": "Amount for the digest"
          },
          "unit": {
            "enum": ["seconds", "minutes", "hours", "days", "weeks", "months"],
            "type": "string",
            "description": "Unit of the digest"
          },
          "type": {
            "$ref": "#/components/schemas/DigestTypeEnum"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "description": "Optional array of events associated with the digest, represented as key-value pairs"
          },
          "backoff": {
            "type": "boolean",
            "description": "Regular digest: Indicates if backoff is enabled for the regular digest"
          },
          "backoffAmount": {
            "type": "number",
            "description": "Regular digest: Amount for backoff"
          },
          "backoffUnit": {
            "$ref": "#/components/schemas/DigestUnitEnum"
          },
          "updateMode": {
            "type": "boolean",
            "description": "Regular digest: Indicates if the digest should update"
          },
          "timed": {
            "description": "Configuration for timed digest",
            "allOf": [
              {
                "$ref": "#/components/schemas/DigestTimedConfigDto"
              }
            ]
          }
        },
        "required": ["type"]
      },
      "ExecutionDetailsStatusEnum": {
        "type": "string",
        "description": "Status of the execution detail",
        "enum": ["Success", "Warning", "Failed", "Pending", "Queued", "ReadConfirmation"]
      },
      "ProvidersIdEnum": {
        "type": "string",
        "description": "Provider ID of the job",
        "enum": [
          "emailjs",
          "mailgun",
          "mailjet",
          "mandrill",
          "nodemailer",
          "postmark",
          "sendgrid",
          "sendinblue",
          "ses",
          "netcore",
          "infobip-email",
          "resend",
          "plunk",
          "mailersend",
          "mailtrap",
          "clickatell",
          "outlook365",
          "novu-email",
          "sparkpost",
          "email-webhook",
          "braze",
          "nexmo",
          "plivo",
          "sms77",
          "sms-central",
          "sns",
          "telnyx",
          "twilio",
          "gupshup",
          "firetext",
          "infobip-sms",
          "burst-sms",
          "bulk-sms",
          "isend-sms",
          "forty-six-elks",
          "kannel",
          "maqsam",
          "termii",
          "africas-talking",
          "novu-sms",
          "sendchamp",
          "generic-sms",
          "clicksend",
          "bandwidth",
          "messagebird",
          "simpletexting",
          "azure-sms",
          "ring-central",
          "brevo-sms",
          "eazy-sms",
          "mobishastra",
          "fcm",
          "apns",
          "expo",
          "one-signal",
          "pushpad",
          "push-webhook",
          "pusher-beams",
          "novu",
          "slack",
          "discord",
          "msteams",
          "mattermost",
          "ryver",
          "zulip",
          "grafana-on-call",
          "getstream",
          "rocket-chat",
          "whatsapp-business"
        ]
      },
      "ExecutionDetailsSourceEnum": {
        "type": "string",
        "description": "Source of the execution detail",
        "enum": ["Credentials", "Internal", "Payload", "Webhook"]
      },
      "ActivityNotificationExecutionDetailResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier of the execution detail"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation time of the execution detail"
          },
          "status": {
            "$ref": "#/components/schemas/ExecutionDetailsStatusEnum"
          },
          "detail": {
            "type": "string",
            "description": "Detailed information about the execution"
          },
          "isRetry": {
            "type": "boolean",
            "description": "Whether the execution is a retry or not"
          },
          "isTest": {
            "type": "boolean",
            "description": "Whether the execution is a test or not"
          },
          "providerId": {
            "$ref": "#/components/schemas/ProvidersIdEnum"
          },
          "raw": {
            "type": "string",
            "nullable": true,
            "description": "Raw data of the execution"
          },
          "source": {
            "$ref": "#/components/schemas/ExecutionDetailsSourceEnum"
          }
        },
        "required": ["_id", "status", "detail", "isRetry", "isTest", "providerId", "source"]
      },
      "BuilderFieldTypeEnum": {
        "type": "string",
        "enum": ["BOOLEAN", "TEXT", "DATE", "NUMBER", "STATEMENT", "LIST", "MULTI_LIST", "GROUP"]
      },
      "FieldFilterPartDto": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "operator": {
            "type": "string",
            "enum": [
              "LARGER",
              "SMALLER",
              "LARGER_EQUAL",
              "SMALLER_EQUAL",
              "EQUAL",
              "NOT_EQUAL",
              "ALL_IN",
              "ANY_IN",
              "NOT_IN",
              "BETWEEN",
              "NOT_BETWEEN",
              "LIKE",
              "NOT_LIKE",
              "IN"
            ]
          },
          "on": {
            "type": "string",
            "enum": ["subscriber", "payload"]
          }
        },
        "required": ["field", "value", "operator", "on"]
      },
      "StepFilterDto": {
        "type": "object",
        "properties": {
          "isNegated": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/BuilderFieldTypeEnum"
          },
          "value": {
            "type": "string",
            "enum": ["AND", "OR"]
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldFilterPartDto"
            }
          }
        },
        "required": ["isNegated", "type", "value", "children"]
      },
      "MessageTemplateDto": {
        "type": "object",
        "properties": {}
      },
      "ActivityNotificationStepResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier of the step"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the step is active or not"
          },
          "replyCallback": {
            "type": "object",
            "description": "Reply callback settings"
          },
          "controlVariables": {
            "type": "object",
            "description": "Control variables"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata for the workflow step"
          },
          "issues": {
            "type": "object",
            "description": "Step issues"
          },
          "filters": {
            "description": "Filter criteria for the step",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepFilterDto"
            }
          },
          "template": {
            "description": "Optional template for the step",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageTemplateDto"
              }
            ]
          },
          "variants": {
            "description": "Variants of the step",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityNotificationStepResponseDto"
            }
          },
          "_templateId": {
            "type": "string",
            "description": "The identifier for the template associated with this step"
          },
          "name": {
            "type": "string",
            "description": "The name of the step"
          },
          "_parentId": {
            "type": "string",
            "nullable": true,
            "description": "The unique identifier for the parent step"
          }
        },
        "required": ["_id", "active", "filters", "_templateId"]
      },
      "ActivityNotificationJobResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier of the job"
          },
          "type": {
            "enum": [
              "in_app",
              "email",
              "sms",
              "chat",
              "push",
              "digest",
              "trigger",
              "delay",
              "custom"
            ],
            "type": "string",
            "description": "Type of the job"
          },
          "digest": {
            "description": "Optional digest for the job, including metadata and events",
            "allOf": [
              {
                "$ref": "#/components/schemas/DigestMetadataDto"
              }
            ]
          },
          "executionDetails": {
            "description": "Execution details of the job",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityNotificationExecutionDetailResponseDto"
            }
          },
          "step": {
            "description": "Step details of the job",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivityNotificationStepResponseDto"
              }
            ]
          },
          "payload": {
            "type": "object",
            "description": "Optional payload for the job"
          },
          "providerId": {
            "$ref": "#/components/schemas/ProvidersIdEnum"
          },
          "status": {
            "type": "string",
            "description": "Status of the job"
          },
          "updatedAt": {
            "type": "string",
            "description": "Updated time of the notification"
          }
        },
        "required": ["_id", "type", "executionDetails", "step", "providerId", "status"]
      },
      "ActivityNotificationResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier of the notification"
          },
          "_environmentId": {
            "type": "string",
            "description": "Environment ID of the notification"
          },
          "_organizationId": {
            "type": "string",
            "description": "Organization ID of the notification"
          },
          "_subscriberId": {
            "type": "string",
            "description": "Subscriber ID of the notification"
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction ID of the notification"
          },
          "_templateId": {
            "type": "string",
            "description": "Template ID of the notification"
          },
          "_digestedNotificationId": {
            "type": "string",
            "description": "Digested Notification ID"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation time of the notification"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated time of the notification"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepTypeEnum"
            }
          },
          "subscriber": {
            "description": "Subscriber of the notification",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivityNotificationSubscriberResponseDto"
              }
            ]
          },
          "template": {
            "description": "Template of the notification",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivityNotificationTemplateResponseDto"
              }
            ]
          },
          "jobs": {
            "description": "Jobs of the notification",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityNotificationJobResponseDto"
            }
          },
          "payload": {
            "type": "object",
            "description": "Payload of the notification"
          },
          "tags": {
            "description": "Tags associated with the notification",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "controls": {
            "type": "object",
            "description": "Controls associated with the notification"
          },
          "to": {
            "type": "object",
            "description": "To field for subscriber definition"
          }
        },
        "required": ["_environmentId", "_organizationId", "_subscriberId", "transactionId"]
      },
      "ActivitiesResponseDto": {
        "type": "object",
        "properties": {
          "hasMore": {
            "type": "boolean",
            "description": "Indicates if there are more activities in the result set"
          },
          "data": {
            "description": "Array of activity notifications",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityNotificationResponseDto"
            }
          },
          "pageSize": {
            "type": "number",
            "description": "Page size of the activities"
          },
          "page": {
            "type": "number",
            "description": "Current page of the activities"
          }
        },
        "required": ["hasMore", "data", "pageSize", "page"]
      },
      "ActivityStatsResponseDto": {
        "type": "object",
        "properties": {
          "weeklySent": {
            "type": "number"
          },
          "monthlySent": {
            "type": "number"
          }
        },
        "required": ["weeklySent", "monthlySent"]
      },
      "ActivityGraphStatesResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "count": {
            "type": "number"
          },
          "templates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["in_app", "email", "sms", "chat", "push"]
            }
          }
        },
        "required": ["_id", "count", "templates", "channels"]
      },
      "CredentialsDto": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "secretKey": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "port": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "accountSid": {
            "type": "string"
          },
          "messageProfileId": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "senderName": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "applicationId": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "requireTls": {
            "type": "boolean"
          },
          "ignoreTls": {
            "type": "boolean"
          },
          "tlsOptions": {
            "type": "object"
          },
          "baseUrl": {
            "type": "string"
          },
          "webhookUrl": {
            "type": "string"
          },
          "redirectUrl": {
            "type": "string"
          },
          "hmac": {
            "type": "boolean"
          },
          "serviceAccount": {
            "type": "string"
          },
          "ipPoolName": {
            "type": "string"
          },
          "apiKeyRequestHeader": {
            "type": "string"
          },
          "secretKeyRequestHeader": {
            "type": "string"
          },
          "idPath": {
            "type": "string"
          },
          "datePath": {
            "type": "string"
          },
          "apiToken": {
            "type": "string"
          },
          "authenticateByToken": {
            "type": "boolean"
          },
          "authenticationTokenKey": {
            "type": "string"
          },
          "instanceId": {
            "type": "string"
          },
          "alertUid": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "externalLink": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "phoneNumberIdentification": {
            "type": "string"
          },
          "accessKey": {
            "type": "string"
          }
        }
      },
      "IntegrationResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier of the integration record in the database. This is automatically generated."
          },
          "_environmentId": {
            "type": "string",
            "description": "The unique identifier for the environment associated with this integration. This links to the Environment collection."
          },
          "_organizationId": {
            "type": "string",
            "description": "The unique identifier for the organization that owns this integration. This links to the Organization collection."
          },
          "name": {
            "type": "string",
            "description": "The name of the integration, which is used to identify it in the user interface."
          },
          "identifier": {
            "type": "string",
            "description": "A unique string identifier for the integration, often used for API calls or internal references."
          },
          "providerId": {
            "type": "string",
            "description": "The identifier for the provider of the integration (e.g., \"mailgun\", \"twilio\")."
          },
          "channel": {
            "enum": ["in_app", "email", "sms", "chat", "push"],
            "type": "string",
            "description": "The channel type for the integration, which defines how the integration communicates (e.g., email, SMS)."
          },
          "credentials": {
            "description": "The credentials required for the integration to function, including API keys and other sensitive information.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialsDto"
              }
            ]
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether the integration is currently active. An active integration will process events and messages."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the integration has been marked as deleted (soft delete)."
          },
          "deletedAt": {
            "type": "string",
            "description": "The timestamp indicating when the integration was deleted. This is set when the integration is soft deleted."
          },
          "deletedBy": {
            "type": "string",
            "description": "The identifier of the user who performed the deletion of this integration. Useful for audit trails."
          },
          "primary": {
            "type": "boolean",
            "description": "Indicates whether this integration is marked as primary. A primary integration is often the default choice for processing."
          },
          "conditions": {
            "description": "An array of conditions associated with the integration that may influence its behavior or processing logic.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepFilterDto"
            }
          }
        },
        "required": [
          "_environmentId",
          "_organizationId",
          "name",
          "identifier",
          "providerId",
          "channel",
          "credentials",
          "active",
          "deleted",
          "primary"
        ]
      },
      "CreateIntegrationRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the integration"
          },
          "identifier": {
            "type": "string",
            "description": "The unique identifier for the integration"
          },
          "_environmentId": {
            "type": "string",
            "description": "The ID of the associated environment",
            "format": "uuid"
          },
          "providerId": {
            "type": "string",
            "description": "The provider ID for the integration"
          },
          "channel": {
            "enum": ["in_app", "email", "sms", "chat", "push"],
            "type": "string",
            "description": "The channel type for the integration"
          },
          "credentials": {
            "description": "The credentials for the integration",
            "allOf": [
              {
                "$ref": "#/components/schemas/CredentialsDto"
              }
            ]
          },
          "active": {
            "type": "boolean",
            "description": "If the integration is active, the validation on the credentials field will run"
          },
          "check": {
            "type": "boolean",
            "description": "Flag to check the integration status"
          },
          "conditions": {
            "description": "Conditions for the integration",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepFilterDto"
            }
          }
        },
        "required": ["providerId", "channel"]
      },
      "UpdateIntegrationRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "active": {
            "type": "boolean",
            "description": "If the integration is active the validation on the credentials field will run"
          },
          "credentials": {
            "$ref": "#/components/schemas/CredentialsDto"
          },
          "removeNovuBranding": {
            "type": "boolean",
            "description": "If true, the Novu branding will be removed from the Inbox component"
          },
          "check": {
            "type": "boolean"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepFilterDto"
            }
          }
        }
      },
      "PaginatedResponseDto": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "The current page of the paginated response"
          },
          "hasMore": {
            "type": "boolean",
            "description": "Does the list have more items to fetch"
          },
          "pageSize": {
            "type": "number",
            "description": "Number of items on each page"
          },
          "data": {
            "description": "The list of items matching the query",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": ["page", "hasMore", "pageSize", "data"]
      },
      "ChannelCredentials": {
        "type": "object",
        "properties": {
          "webhookUrl": {
            "type": "string",
            "description": "Webhook URL used by chat app integrations. The webhook should be obtained from the chat app provider.",
            "example": "https://example.com/webhook"
          },
          "channel": {
            "type": "string",
            "description": "Channel specification for Mattermost chat notifications.",
            "example": "general"
          },
          "deviceTokens": {
            "description": "Contains an array of the subscriber device tokens for a given provider. Used on Push integrations.",
            "example": ["token1", "token2", "token3"],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "alertUid": {
            "type": "string",
            "description": "Alert UID for Grafana on-call webhook payload.",
            "example": "12345-abcde"
          },
          "title": {
            "type": "string",
            "description": "Title to be used with Grafana on-call webhook.",
            "example": "Critical Alert"
          },
          "imageUrl": {
            "type": "string",
            "description": "Image URL property for Grafana on-call webhook.",
            "example": "https://example.com/image.png"
          },
          "state": {
            "type": "string",
            "description": "State property for Grafana on-call webhook.",
            "example": "resolved"
          },
          "externalUrl": {
            "type": "string",
            "description": "Link to upstream details property for Grafana on-call webhook.",
            "example": "https://example.com/details"
          }
        }
      },
      "ChannelSettingsDto": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string",
            "enum": [
              "slack",
              "discord",
              "msteams",
              "mattermost",
              "ryver",
              "zulip",
              "grafana-on-call",
              "getstream",
              "rocket-chat",
              "whatsapp-business",
              "fcm",
              "apns",
              "expo",
              "one-signal",
              "pushpad",
              "push-webhook",
              "pusher-beams"
            ],
            "description": "The provider identifier for the credentials"
          },
          "integrationIdentifier": {
            "type": "string",
            "description": "The integration identifier"
          },
          "credentials": {
            "description": "Credentials payload for the specified provider",
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelCredentials"
              }
            ]
          },
          "_integrationId": {
            "type": "string",
            "description": "The unique identifier of the integration associated with this channel."
          }
        },
        "required": ["providerId", "credentials", "_integrationId"]
      },
      "SubscriberResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The internal ID generated by Novu for your subscriber. This ID does not match the `subscriberId` used in your queries. Refer to `subscriberId` for that identifier."
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the subscriber."
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the subscriber."
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "The email address of the subscriber."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the subscriber."
          },
          "avatar": {
            "type": "string",
            "description": "The URL of the subscriber's avatar image."
          },
          "locale": {
            "type": "string",
            "description": "The locale setting of the subscriber, indicating their preferred language or region."
          },
          "subscriberId": {
            "type": "string",
            "description": "The identifier used to create this subscriber, which typically corresponds to the user ID in your system."
          },
          "channels": {
            "description": "An array of channel settings associated with the subscriber.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelSettingsDto"
            }
          },
          "topics": {
            "description": "An array of topics that the subscriber is subscribed to.",
            "deprecated": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isOnline": {
            "type": "boolean",
            "description": "Indicates whether the subscriber is currently online."
          },
          "lastOnlineAt": {
            "type": "string",
            "description": "The timestamp indicating when the subscriber was last online, in ISO 8601 format."
          },
          "_organizationId": {
            "type": "string",
            "description": "The unique identifier of the organization to which the subscriber belongs."
          },
          "_environmentId": {
            "type": "string",
            "description": "The unique identifier of the environment associated with this subscriber."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the subscriber has been deleted."
          },
          "createdAt": {
            "type": "string",
            "description": "The timestamp indicating when the subscriber was created, in ISO 8601 format."
          },
          "updatedAt": {
            "type": "string",
            "description": "The timestamp indicating when the subscriber was last updated, in ISO 8601 format."
          },
          "__v": {
            "type": "number",
            "description": "The version of the subscriber document."
          },
          "data": {
            "type": "object",
            "description": "Additional custom data for the subscriber",
            "additionalProperties": true,
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "description": "Timezone of the subscriber"
          }
        },
        "required": [
          "subscriberId",
          "_organizationId",
          "_environmentId",
          "deleted",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdatedSubscriberDto": {
        "type": "object",
        "properties": {
          "subscriberId": {
            "type": "string",
            "description": "The ID of the subscriber that was updated."
          }
        },
        "required": ["subscriberId"]
      },
      "CreatedSubscriberDto": {
        "type": "object",
        "properties": {
          "subscriberId": {
            "type": "string",
            "description": "The ID of the subscriber that was created."
          }
        },
        "required": ["subscriberId"]
      },
      "FailedOperationDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message associated with the failed operation."
          },
          "subscriberId": {
            "type": "string",
            "description": "The subscriber ID associated with the failed operation. This field is optional."
          }
        }
      },
      "BulkCreateSubscriberResponseDto": {
        "type": "object",
        "properties": {
          "updated": {
            "description": "An array of subscribers that were successfully updated.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdatedSubscriberDto"
            }
          },
          "created": {
            "description": "An array of subscribers that were successfully created.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatedSubscriberDto"
            }
          },
          "failed": {
            "description": "An array of failed operations with error messages and optional subscriber IDs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FailedOperationDto"
            }
          }
        },
        "required": ["updated", "created", "failed"]
      },
      "CreateSubscriberRequestDto": {
        "type": "object",
        "properties": {
          "subscriberId": {
            "type": "string",
            "description": "The internal identifier you used to create this subscriber, usually correlates to the id the user in your systems"
          },
          "email": {
            "type": "string",
            "description": "The email address of the subscriber."
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the subscriber."
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the subscriber."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the subscriber."
          },
          "avatar": {
            "type": "string",
            "description": "An HTTP URL to the profile image of your subscriber."
          },
          "locale": {
            "type": "string",
            "description": "The locale of the subscriber."
          },
          "data": {
            "type": "object",
            "description": "An optional payload object that can contain any properties.",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "channels": {
            "description": "An optional array of subscriber channels.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberChannelDto"
            }
          }
        },
        "required": ["subscriberId"]
      },
      "BulkSubscriberCreateDto": {
        "type": "object",
        "properties": {
          "subscribers": {
            "description": "An array of subscribers to be created in bulk.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSubscriberRequestDto"
            }
          }
        },
        "required": ["subscribers"]
      },
      "UpdateSubscriberChannelRequestDto": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string",
            "enum": [
              "slack",
              "discord",
              "msteams",
              "mattermost",
              "ryver",
              "zulip",
              "grafana-on-call",
              "getstream",
              "rocket-chat",
              "whatsapp-business",
              "fcm",
              "apns",
              "expo",
              "one-signal",
              "pushpad",
              "push-webhook",
              "pusher-beams"
            ],
            "description": "The provider identifier for the credentials"
          },
          "integrationIdentifier": {
            "type": "string",
            "description": "The integration identifier"
          },
          "credentials": {
            "description": "Credentials payload for the specified provider",
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelCredentials"
              }
            ]
          }
        },
        "required": ["providerId", "credentials"]
      },
      "UpdateSubscriberOnlineFlagRequestDto": {
        "type": "object",
        "properties": {
          "isOnline": {
            "type": "boolean"
          }
        },
        "required": ["isOnline"]
      },
      "EmailBlockTypeEnum": {
        "type": "string",
        "description": "Type of the email block",
        "enum": ["button", "text"]
      },
      "TextAlignEnum": {
        "type": "string",
        "description": "Text alignment for the email block",
        "enum": ["center", "left", "right"]
      },
      "EmailBlockStyles": {
        "type": "object",
        "properties": {
          "textAlign": {
            "$ref": "#/components/schemas/TextAlignEnum"
          }
        },
        "required": ["textAlign"]
      },
      "EmailBlock": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EmailBlockTypeEnum"
          },
          "content": {
            "type": "string",
            "description": "Content of the email block"
          },
          "url": {
            "type": "string",
            "description": "URL associated with the email block, if any"
          },
          "styles": {
            "description": "Styles applied to the email block",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailBlockStyles"
              }
            ]
          }
        },
        "required": ["type", "content"]
      },
      "ChannelCTATypeEnum": {
        "type": "string",
        "description": "Type of call to action",
        "enum": ["redirect"]
      },
      "MessageCTAData": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL for the call to action"
          }
        }
      },
      "MessageActionStatusEnum": {
        "type": "string",
        "description": "Status of the message action",
        "enum": ["pending", "done"]
      },
      "ButtonTypeEnum": {
        "type": "string",
        "description": "Type of button for the action result",
        "enum": ["primary", "secondary"]
      },
      "MessageButton": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ButtonTypeEnum"
          },
          "content": {
            "type": "string",
            "description": "Content of the button"
          },
          "resultContent": {
            "type": "string",
            "description": "Content of the result when the button is clicked"
          }
        },
        "required": ["type", "content"]
      },
      "MessageActionResult": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "object",
            "description": "Payload of the action result"
          },
          "type": {
            "$ref": "#/components/schemas/ButtonTypeEnum"
          }
        }
      },
      "MessageAction": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/MessageActionStatusEnum"
          },
          "buttons": {
            "description": "List of buttons associated with the message action",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageButton"
            }
          },
          "result": {
            "description": "Result of the message action",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageActionResult"
              }
            ]
          }
        }
      },
      "MessageCTA": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ChannelCTATypeEnum"
          },
          "data": {
            "description": "Data associated with the call to action",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageCTAData"
              }
            ]
          },
          "action": {
            "description": "Action associated with the call to action",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageAction"
              }
            ]
          }
        },
        "required": ["data"]
      },
      "ActorTypeEnum": {
        "type": "string",
        "description": "The type of the actor, indicating the role in the notification process.",
        "enum": ["none", "user", "system_icon", "system_custom"]
      },
      "ActorFeedItemDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "The data associated with the actor, can be null if not applicable.",
            "nullable": true,
            "example": null
          },
          "type": {
            "$ref": "#/components/schemas/ActorTypeEnum"
          }
        },
        "required": ["data", "type"]
      },
      "SubscriberFeedResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The internal ID generated by Novu for your subscriber. This ID does not match the `subscriberId` used in your queries. Refer to `subscriberId` for that identifier."
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the subscriber."
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the subscriber."
          },
          "avatar": {
            "type": "string",
            "description": "The URL of the subscriber's avatar image."
          },
          "subscriberId": {
            "type": "string",
            "description": "The identifier used to create this subscriber, which typically corresponds to the user ID in your system."
          }
        },
        "required": ["subscriberId"]
      },
      "NotificationFeedItemDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the notification.",
            "example": "615c1f2f9b0c5b001f8e4e3b"
          },
          "_templateId": {
            "type": "string",
            "description": "Identifier for the template used to generate the notification.",
            "example": "template_12345"
          },
          "_environmentId": {
            "type": "string",
            "description": "Identifier for the environment where the notification is sent.",
            "example": "env_67890"
          },
          "_messageTemplateId": {
            "type": "string",
            "description": "Identifier for the message template used.",
            "example": "message_template_54321"
          },
          "_organizationId": {
            "type": "string",
            "description": "Identifier for the organization sending the notification.",
            "example": "org_98765"
          },
          "_notificationId": {
            "type": "string",
            "description": "Unique identifier for the notification instance.",
            "example": "notification_123456"
          },
          "_subscriberId": {
            "type": "string",
            "description": "Unique identifier for the subscriber receiving the notification.",
            "example": "subscriber_112233"
          },
          "_feedId": {
            "type": "string",
            "description": "Identifier for the feed associated with the notification.",
            "example": "feed_445566"
          },
          "_jobId": {
            "type": "string",
            "description": "Identifier for the job that triggered the notification.",
            "example": "job_778899"
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp indicating when the notification was created.",
            "format": "date-time",
            "nullable": true,
            "example": "2024-12-10T10:10:59.639Z"
          },
          "updatedAt": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp indicating when the notification was last updated.",
            "format": "date-time",
            "example": "2024-12-10T10:10:59.639Z"
          },
          "actor": {
            "description": "Actor details related to the notification, if applicable.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActorFeedItemDto"
              }
            ]
          },
          "subscriber": {
            "description": "Subscriber details associated with this notification.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriberFeedResponseDto"
              }
            ]
          },
          "transactionId": {
            "type": "string",
            "description": "Unique identifier for the transaction associated with the notification.",
            "example": "transaction_123456"
          },
          "templateIdentifier": {
            "type": "string",
            "nullable": true,
            "description": "Identifier for the template used, if applicable.",
            "example": "template_abcdef"
          },
          "providerId": {
            "type": "string",
            "nullable": true,
            "description": "Identifier for the provider that sends the notification.",
            "example": "provider_xyz"
          },
          "content": {
            "type": "string",
            "description": "The main content of the notification.",
            "example": "This is a test notification content."
          },
          "subject": {
            "type": "string",
            "nullable": true,
            "description": "The subject line for email notifications, if applicable.",
            "example": "Test Notification Subject"
          },
          "channel": {
            "$ref": "#/components/schemas/ChannelTypeEnum"
          },
          "read": {
            "type": "boolean",
            "description": "Indicates whether the notification has been read by the subscriber.",
            "example": false
          },
          "seen": {
            "type": "boolean",
            "description": "Indicates whether the notification has been seen by the subscriber.",
            "example": true
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the notification has been deleted.",
            "example": false
          },
          "deviceTokens": {
            "nullable": true,
            "description": "Device tokens for push notifications, if applicable.",
            "example": ["token1", "token2"],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cta": {
            "description": "Call-to-action information associated with the notification.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageCTA"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the notification.",
            "enum": ["sent", "error", "warning"],
            "example": "sent"
          },
          "payload": {
            "type": "object",
            "description": "The payload that was used to send the notification trigger.",
            "additionalProperties": true,
            "example": {
              "key": "value"
            }
          },
          "overrides": {
            "type": "object",
            "description": "Provider-specific overrides used when triggering the notification.",
            "additionalProperties": true,
            "example": {
              "overrideKey": "overrideValue"
            }
          }
        },
        "required": [
          "_id",
          "_templateId",
          "_environmentId",
          "_messageTemplateId",
          "_organizationId",
          "_notificationId",
          "_subscriberId",
          "_feedId",
          "_jobId",
          "transactionId",
          "content",
          "channel",
          "read",
          "seen",
          "deleted",
          "cta",
          "status"
        ]
      },
      "FeedResponseDto": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "number",
            "description": "Total number of notifications available.",
            "example": 5
          },
          "hasMore": {
            "type": "boolean",
            "description": "Indicates if there are more notifications to load.",
            "example": true
          },
          "data": {
            "description": "Array of notifications returned in the response.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationFeedItemDto"
            }
          },
          "pageSize": {
            "type": "number",
            "description": "The number of notifications returned in this response.",
            "example": 2
          },
          "page": {
            "type": "number",
            "description": "The current page number of the notifications.",
            "example": 1
          }
        },
        "required": ["hasMore", "data", "pageSize", "page"]
      },
      "UnseenCountResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          }
        },
        "required": ["count"]
      },
      "NotificationGroup": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_parentId": {
            "type": "string"
          }
        },
        "required": ["name", "_environmentId", "_organizationId"]
      },
      "PreferenceChannels": {
        "type": "object",
        "properties": {
          "email": {
            "type": "boolean"
          },
          "sms": {
            "type": "boolean"
          },
          "in_app": {
            "type": "boolean"
          },
          "chat": {
            "type": "boolean"
          },
          "push": {
            "type": "boolean"
          }
        }
      },
      "DigestRegularMetadata": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "unit": {
            "type": "string",
            "enum": ["seconds", "minutes", "hours", "days", "weeks", "months"]
          },
          "digestKey": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["regular", "backoff"]
          },
          "backoff": {
            "type": "boolean"
          },
          "backoffAmount": {
            "type": "number"
          },
          "backoffUnit": {
            "type": "string",
            "enum": ["seconds", "minutes", "hours", "days", "weeks", "months"]
          },
          "updateMode": {
            "type": "boolean"
          }
        },
        "required": ["type"]
      },
      "TimedConfig": {
        "type": "object",
        "properties": {
          "atTime": {
            "type": "string"
          },
          "weekDays": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
            }
          },
          "monthDays": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ordinal": {
            "type": "string",
            "enum": ["1", "2", "3", "4", "5", "last"]
          },
          "ordinalValue": {
            "type": "string",
            "enum": [
              "day",
              "weekday",
              "weekend",
              "sunday",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday"
            ]
          },
          "monthlyType": {
            "type": "string",
            "enum": ["each", "on"]
          }
        }
      },
      "DigestTimedMetadata": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "unit": {
            "type": "string",
            "enum": ["seconds", "minutes", "hours", "days", "weeks", "months"]
          },
          "digestKey": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["timed"]
          },
          "timed": {
            "$ref": "#/components/schemas/TimedConfig"
          }
        },
        "required": ["type"]
      },
      "DelayRegularMetadata": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "unit": {
            "type": "string",
            "enum": ["seconds", "minutes", "hours", "days", "weeks", "months"]
          },
          "type": {
            "type": "string",
            "enum": ["regular"]
          }
        },
        "required": ["type"]
      },
      "DelayScheduledMetadata": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["scheduled"]
          },
          "delayPath": {
            "type": "string"
          }
        },
        "required": ["type", "delayPath"]
      },
      "MessageTemplate": {
        "type": "object",
        "properties": {}
      },
      "ReplyCallback": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Indicates whether the reply callback is active."
          },
          "url": {
            "type": "string",
            "description": "The URL to which replies should be sent."
          }
        }
      },
      "NotificationStepData": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the notification step."
          },
          "uuid": {
            "type": "string",
            "description": "Universally unique identifier for the notification step."
          },
          "name": {
            "type": "string",
            "description": "Name of the notification step."
          },
          "_templateId": {
            "type": "string",
            "description": "ID of the template associated with this notification step."
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether the notification step is active."
          },
          "shouldStopOnFail": {
            "type": "boolean",
            "description": "Determines if the process should stop on failure."
          },
          "template": {
            "description": "Message template used in this notification step.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageTemplate"
              }
            ]
          },
          "filters": {
            "description": "Filters applied to this notification step.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepFilterDto"
            }
          },
          "_parentId": {
            "type": "string",
            "description": "ID of the parent notification step, if applicable."
          },
          "metadata": {
            "description": "Metadata associated with the workflow step. Can vary based on the type of step.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DigestRegularMetadata"
              },
              {
                "$ref": "#/components/schemas/DigestTimedMetadata"
              },
              {
                "$ref": "#/components/schemas/DelayRegularMetadata"
              },
              {
                "$ref": "#/components/schemas/DelayScheduledMetadata"
              }
            ]
          },
          "replyCallback": {
            "description": "Callback information for replies, including whether it is active and the callback URL.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReplyCallback"
              }
            ]
          }
        }
      },
      "NotificationStepDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the notification step."
          },
          "uuid": {
            "type": "string",
            "description": "Universally unique identifier for the notification step."
          },
          "name": {
            "type": "string",
            "description": "Name of the notification step."
          },
          "_templateId": {
            "type": "string",
            "description": "ID of the template associated with this notification step."
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether the notification step is active."
          },
          "shouldStopOnFail": {
            "type": "boolean",
            "description": "Determines if the process should stop on failure."
          },
          "template": {
            "description": "Message template used in this notification step.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageTemplate"
              }
            ]
          },
          "filters": {
            "description": "Filters applied to this notification step.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepFilterDto"
            }
          },
          "_parentId": {
            "type": "string",
            "description": "ID of the parent notification step, if applicable."
          },
          "metadata": {
            "description": "Metadata associated with the workflow step. Can vary based on the type of step.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DigestRegularMetadata"
              },
              {
                "$ref": "#/components/schemas/DigestTimedMetadata"
              },
              {
                "$ref": "#/components/schemas/DelayRegularMetadata"
              },
              {
                "$ref": "#/components/schemas/DelayScheduledMetadata"
              }
            ]
          },
          "replyCallback": {
            "description": "Callback information for replies, including whether it is active and the callback URL.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReplyCallback"
              }
            ]
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationStepData"
            }
          }
        }
      },
      "NotificationTrigger": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["event"]
          },
          "identifier": {
            "type": "string"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationTriggerVariable"
            }
          },
          "subscriberVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationTriggerVariable"
            }
          }
        },
        "required": ["type", "identifier", "variables"]
      },
      "WorkflowResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "draft": {
            "type": "boolean"
          },
          "preferenceSettings": {
            "$ref": "#/components/schemas/PreferenceChannels"
          },
          "critical": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationStepDto"
            }
          },
          "_organizationId": {
            "type": "string"
          },
          "_creatorId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationTrigger"
            }
          },
          "_notificationGroupId": {
            "type": "string"
          },
          "_parentId": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string"
          },
          "deletedBy": {
            "type": "string"
          },
          "notificationGroup": {
            "$ref": "#/components/schemas/NotificationGroup"
          },
          "data": {
            "type": "object"
          },
          "workflowIntegrationStatus": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "description",
          "active",
          "draft",
          "preferenceSettings",
          "critical",
          "tags",
          "steps",
          "_organizationId",
          "_creatorId",
          "_environmentId",
          "triggers",
          "_notificationGroupId",
          "deleted",
          "deletedAt",
          "deletedBy"
        ]
      },
      "MessageStatusEnum": {
        "type": "string",
        "description": "Status of the message",
        "enum": ["sent", "error", "warning"]
      },
      "MessageResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the message"
          },
          "_templateId": {
            "type": "string",
            "description": "Template ID associated with the message"
          },
          "_environmentId": {
            "type": "string",
            "description": "Environment ID where the message is sent"
          },
          "_messageTemplateId": {
            "type": "string",
            "description": "Message template ID"
          },
          "_organizationId": {
            "type": "string",
            "description": "Organization ID associated with the message"
          },
          "_notificationId": {
            "type": "string",
            "description": "Notification ID associated with the message"
          },
          "_subscriberId": {
            "type": "string",
            "description": "Subscriber ID associated with the message"
          },
          "subscriber": {
            "description": "Subscriber details, if available",
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriberResponseDto"
              }
            ]
          },
          "template": {
            "description": "Workflow template associated with the message",
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkflowResponse"
              }
            ]
          },
          "templateIdentifier": {
            "type": "string",
            "description": "Identifier for the message template"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation date of the message"
          },
          "lastSeenDate": {
            "type": "string",
            "description": "Last seen date of the message, if available"
          },
          "lastReadDate": {
            "type": "string",
            "description": "Last read date of the message, if available"
          },
          "content": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmailBlock"
              },
              {
                "type": "string",
                "description": "String representation of the content"
              }
            ],
            "description": "Content of the message, can be an email block or a string"
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction ID associated with the message"
          },
          "subject": {
            "type": "string",
            "description": "Subject of the message, if applicable"
          },
          "channel": {
            "$ref": "#/components/schemas/ChannelTypeEnum"
          },
          "read": {
            "type": "boolean",
            "description": "Indicates if the message has been read"
          },
          "seen": {
            "type": "boolean",
            "description": "Indicates if the message has been seen"
          },
          "email": {
            "type": "string",
            "description": "Email address associated with the message, if applicable"
          },
          "phone": {
            "type": "string",
            "description": "Phone number associated with the message, if applicable"
          },
          "directWebhookUrl": {
            "type": "string",
            "description": "Direct webhook URL for the message, if applicable"
          },
          "providerId": {
            "type": "string",
            "description": "Provider ID associated with the message, if applicable"
          },
          "deviceTokens": {
            "description": "Device tokens associated with the message, if applicable",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string",
            "description": "Title of the message, if applicable"
          },
          "cta": {
            "description": "Call to action associated with the message",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageCTA"
              }
            ]
          },
          "_feedId": {
            "type": "string",
            "nullable": true,
            "description": "Feed ID associated with the message, if applicable"
          },
          "status": {
            "$ref": "#/components/schemas/MessageStatusEnum"
          },
          "errorId": {
            "type": "string",
            "description": "Error ID if the message has an error"
          },
          "errorText": {
            "type": "string",
            "description": "Error text if the message has an error"
          },
          "payload": {
            "type": "object",
            "description": "The payload that was used to send the notification trigger"
          },
          "overrides": {
            "type": "object",
            "description": "Provider specific overrides used when triggering the notification"
          }
        },
        "required": [
          "_templateId",
          "_environmentId",
          "_messageTemplateId",
          "_organizationId",
          "_notificationId",
          "_subscriberId",
          "createdAt",
          "content",
          "transactionId",
          "channel",
          "read",
          "seen",
          "cta",
          "status"
        ]
      },
      "MessageMarkAsRequestDto": {
        "type": "object",
        "properties": {
          "messageId": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "markAs": {
            "enum": ["read", "seen", "unread", "unseen"],
            "type": "string"
          }
        },
        "required": ["messageId", "markAs"]
      },
      "MarkAllMessageAsRequestDto": {
        "type": "object",
        "properties": {
          "feedIdentifier": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Optional feed identifier or array of feed identifiers"
          },
          "markAs": {
            "enum": ["read", "seen", "unread", "unseen"],
            "type": "string",
            "description": "Mark all subscriber messages as read, unread, seen or unseen"
          }
        },
        "required": ["markAs"]
      },
      "MarkMessageActionAsSeenDto": {
        "type": "object",
        "properties": {
          "status": {
            "enum": ["pending", "done"],
            "type": "string",
            "description": "Message action status"
          },
          "payload": {
            "type": "object",
            "description": "Message action payload"
          }
        },
        "required": ["status"]
      },
      "String": {
        "type": "object",
        "properties": {}
      },
      "ListSubscribersResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "List of returned Subscribers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberResponseDto"
            }
          },
          "next": {
            "type": "string",
            "description": "The cursor for the next page of results, or null if there are no more pages.",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "description": "The cursor for the previous page of results, or null if this is the first page.",
            "nullable": true
          }
        },
        "required": ["data", "next", "previous"]
      },
      "PatchSubscriberRequestDto": {
        "type": "object",
        "properties": {
          "subscriberId": {
            "type": "string",
            "nullable": true,
            "description": "Unique identifier of the subscriber"
          },
          "firstName": {
            "type": "string",
            "nullable": true,
            "description": "First name of the subscriber"
          },
          "lastName": {
            "type": "string",
            "nullable": true,
            "description": "Last name of the subscriber"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "Email address of the subscriber"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "description": "Phone number of the subscriber"
          },
          "avatar": {
            "type": "string",
            "nullable": true,
            "description": "Avatar URL or identifier"
          },
          "timezone": {
            "type": "string",
            "nullable": true,
            "description": "Timezone of the subscriber"
          },
          "locale": {
            "type": "string",
            "nullable": true,
            "description": "Locale of the subscriber"
          },
          "data": {
            "type": "object",
            "nullable": true,
            "description": "Additional custom data for the subscriber"
          }
        }
      },
      "RemoveSubscriberResponseDto": {
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "boolean",
            "description": "Indicates whether the operation was acknowledged by the server",
            "example": true
          },
          "status": {
            "type": "string",
            "description": "Status of the subscriber removal operation",
            "example": "success"
          }
        },
        "required": ["acknowledged", "status"]
      },
      "GlobalPreferenceDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether notifications are enabled globally"
          },
          "channels": {
            "description": "Channel-specific preference settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/PreferenceChannels"
              }
            ]
          }
        },
        "required": ["enabled", "channels"]
      },
      "Overrides": {
        "type": "object",
        "properties": {
          "channel": {
            "enum": ["in_app", "email", "sms", "chat", "push"],
            "type": "string",
            "description": "The channel type which is overridden"
          },
          "source": {
            "enum": ["subscriber", "template", "workflowOverride"],
            "type": "string",
            "description": "The source of overrides"
          }
        },
        "required": ["channel", "source"]
      },
      "WorkflowInfoDto": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string",
            "description": "Workflow slug"
          },
          "identifier": {
            "type": "string",
            "description": "Unique identifier of the workflow"
          },
          "name": {
            "type": "string",
            "description": "Display name of the workflow"
          }
        },
        "required": ["slug", "identifier", "name"]
      },
      "WorkflowPreferenceDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether notifications are enabled for this workflow"
          },
          "channels": {
            "description": "Channel-specific preference settings for this workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/PreferenceChannels"
              }
            ]
          },
          "overrides": {
            "description": "List of preference overrides",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Overrides"
            }
          },
          "workflow": {
            "description": "Workflow information",
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkflowInfoDto"
              }
            ]
          }
        },
        "required": ["enabled", "channels", "overrides", "workflow"]
      },
      "GetSubscriberPreferencesDto": {
        "type": "object",
        "properties": {
          "global": {
            "description": "Global preference settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/GlobalPreferenceDto"
              }
            ]
          },
          "workflows": {
            "description": "Workflow-specific preference settings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowPreferenceDto"
            }
          }
        },
        "required": ["global", "workflows"]
      },
      "PatchPreferenceChannelsDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "boolean",
            "description": "Email channel preference"
          },
          "sms": {
            "type": "boolean",
            "description": "SMS channel preference"
          },
          "in_app": {
            "type": "boolean",
            "description": "In-app channel preference"
          },
          "push": {
            "type": "boolean",
            "description": "Push channel preference"
          },
          "chat": {
            "type": "boolean",
            "description": "Chat channel preference"
          }
        }
      },
      "PatchSubscriberPreferencesDto": {
        "type": "object",
        "properties": {
          "channels": {
            "description": "Channel-specific preference settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchPreferenceChannelsDto"
              }
            ]
          },
          "workflowId": {
            "type": "string",
            "description": "If provided, update workflow specific preferences, otherwise update global preferences"
          }
        },
        "required": ["channels"]
      },
      "DeleteMessageResponseDto": {
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "boolean",
            "description": "A boolean stating the success of the action"
          },
          "status": {
            "type": "string",
            "description": "The status enum for the performed action",
            "enum": ["deleted"]
          }
        },
        "required": ["acknowledged", "status"]
      },
      "CreateTopicResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the Topic created."
          },
          "key": {
            "type": "string",
            "description": "User defined custom key and provided by the user that will be an unique identifier for the Topic created."
          }
        },
        "required": ["key"]
      },
      "CreateTopicRequestDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "User defined custom key and provided by the user that will be an unique identifier for the Topic created."
          },
          "name": {
            "type": "string",
            "description": "User defined custom name and provided by the user that will name the Topic created."
          }
        },
        "required": ["key", "name"]
      },
      "AddSubscribersRequestDto": {
        "type": "object",
        "properties": {
          "subscribers": {
            "description": "List of subscriber identifiers that will be associated to the topic",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["subscribers"]
      },
      "FailedAssignmentsDto": {
        "type": "object",
        "properties": {
          "notFound": {
            "description": "List of subscriber IDs that were not found",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AssignSubscriberToTopicDto": {
        "type": "object",
        "properties": {
          "succeeded": {
            "description": "List of successfully assigned subscriber IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "failed": {
            "description": "Details about failed assignments",
            "allOf": [
              {
                "$ref": "#/components/schemas/FailedAssignmentsDto"
              }
            ]
          }
        },
        "required": ["succeeded"]
      },
      "TopicSubscriberDto": {
        "type": "object",
        "properties": {
          "_organizationId": {
            "type": "string",
            "description": "Unique identifier for the organization",
            "example": "org_123456789"
          },
          "_environmentId": {
            "type": "string",
            "description": "Unique identifier for the environment",
            "example": "env_123456789"
          },
          "_subscriberId": {
            "type": "string",
            "description": "Unique identifier for the subscriber",
            "example": "sub_123456789"
          },
          "_topicId": {
            "type": "string",
            "description": "Unique identifier for the topic",
            "example": "topic_123456789"
          },
          "topicKey": {
            "type": "string",
            "description": "Key associated with the topic",
            "example": "my_topic_key"
          },
          "externalSubscriberId": {
            "type": "string",
            "description": "External identifier for the subscriber",
            "example": "external_subscriber_123"
          }
        },
        "required": [
          "_organizationId",
          "_environmentId",
          "_subscriberId",
          "_topicId",
          "topicKey",
          "externalSubscriberId"
        ]
      },
      "RemoveSubscribersRequestDto": {
        "type": "object",
        "properties": {
          "subscribers": {
            "description": "List of subscriber identifiers that will be removed to the topic",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["subscribers"]
      },
      "TopicDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subscribers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["_organizationId", "_environmentId", "key", "name", "subscribers"]
      },
      "FilterTopicsResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "example": [],
            "description": "The list of topics",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicDto"
            }
          },
          "page": {
            "type": "number",
            "example": 1,
            "description": "The current page number"
          },
          "pageSize": {
            "type": "number",
            "example": 10,
            "description": "The number of items per page"
          },
          "totalCount": {
            "type": "number",
            "example": 10,
            "description": "The total number of items"
          }
        },
        "required": ["data", "page", "pageSize", "totalCount"]
      },
      "GetTopicResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subscribers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["_organizationId", "_environmentId", "key", "name", "subscribers"]
      },
      "RenameTopicResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subscribers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["_organizationId", "_environmentId", "key", "name", "subscribers"]
      },
      "RenameTopicRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User defined custom name and provided by the user to rename the topic."
          }
        },
        "required": ["name"]
      },
      "GeneratePreviewResponseDto": {
        "type": "object",
        "properties": {}
      }
    },
    "headers": {
      "Content-Type": {
        "required": true,
        "description": "The MIME type of the response body.",
        "schema": {
          "type": "string"
        },
        "example": "application/json"
      },
      "RateLimit-Limit": {
        "required": false,
        "description": "The number of requests that the client is permitted to make per second. The actual maximum may differ when burst is enabled.",
        "schema": {
          "type": "string"
        },
        "example": "100"
      },
      "RateLimit-Remaining": {
        "required": false,
        "description": "The number of requests remaining until the next window.",
        "schema": {
          "type": "string"
        },
        "example": "93"
      },
      "RateLimit-Reset": {
        "required": false,
        "description": "The remaining seconds until a request of the same cost will be refreshed.",
        "schema": {
          "type": "string"
        },
        "example": "8"
      },
      "RateLimit-Policy": {
        "required": false,
        "description": "The rate limit policy that was used to evaluate the request.",
        "schema": {
          "type": "string"
        },
        "example": "100;w=1;burst=110;comment=\"token bucket\";category=\"trigger\";cost=\"single\""
      },
      "Retry-After": {
        "required": false,
        "description": "The number of seconds after which the client may retry the request that was previously rejected.",
        "schema": {
          "type": "string"
        },
        "example": "8"
      },
      "Idempotency-Key": {
        "required": false,
        "description": "The idempotency key used to evaluate the request.",
        "schema": {
          "type": "string"
        },
        "example": "8"
      },
      "Idempotency-Replay": {
        "required": false,
        "description": "Whether the request was a replay of a previous request.",
        "schema": {
          "type": "string"
        },
        "example": "true"
      },
      "Link": {
        "required": false,
        "description": "A link to the documentation.",
        "schema": {
          "type": "string"
        },
        "example": "https://docs.novu.co/"
      }
    }
  },
  "externalDocs": {
    "description": "Novu Documentation",
    "url": "https://docs.novu.co"
  },
  "security": [
    {
      "secretKey": []
    }
  ],
  "x-speakeasy-name-override": [
    {
      "operationId": "^.*get.*",
      "methodNameOverride": "retrieve"
    },
    {
      "operationId": "^.*retrieve.*",
      "methodNameOverride": "retrieve"
    },
    {
      "operationId": "^.*create.*",
      "methodNameOverride": "create"
    },
    {
      "operationId": "^.*update.*",
      "methodNameOverride": "update"
    },
    {
      "operationId": "^.*list.*",
      "methodNameOverride": "list"
    },
    {
      "operationId": "^.*delete.*",
      "methodNameOverride": "delete"
    },
    {
      "operationId": "^.*remove.*",
      "methodNameOverride": "delete"
    }
  ],
  "x-speakeasy-retries": {
    "strategy": "backoff",
    "backoff": {
      "initialInterval": 1000,
      "maxInterval": 30000,
      "maxElapsedTime": 3600000,
      "exponent": 1.5
    },
    "statusCodes": [408, 409, 429, "5XX"],
    "retryConnectionErrors": true
  }
}
