'use client';

import { get } from '@/lib/novu-api';
import { SignedOut, useAuth, useUser } from '@clerk/nextjs';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import { DynamicCodeBlock } from '../codeblock';

type Environment = {
  _id: string;
  name: string;
  identifier: string;
  apiKeys: {
    key: string;
    _id: string;
  }[];
};

type EnvironmentsResponse = {
  data: Environment[];
};

// Define replacement patterns for different values
// Define user type based on Clerk's User object
type User = {
  externalId?: string | null;
  id?: string;
} | null;

type CodeTemplate = {
  id: string;
  title: string;
  code: string;
  language: string;
  replacements?: {
    pattern: string;
    getValue: (environment: Environment | null, user: User) => string;
  }[];
};

// Predefined code templates
const CODE_TEMPLATES: CodeTemplate[] = [
  {
    id: 'nextjs-inbox',
    title: 'components/inbox.tsx',
    language: 'tsx',
    code: `import { Inbox } from '@novu/nextjs';
import './globals.css';

export const metadata = {
  title: 'Novu Next.js Quickstart',
  description: 'Generated by create next app',
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <nav className="flex justify-end items-center p-4 gap-4 h-16">
          <Inbox
            applicationIdentifier="{{APPLICATION_IDENTIFIER}}"
            subscriber="{{SUBSCRIBER_ID}}"
          />
        </nav>
        {children}
      </body>
    </html>
  );
}`,
    replacements: [
      {
        pattern: '{{APPLICATION_IDENTIFIER}}',
        getValue: (environment, user) => environment?.identifier || 'YOUR_APPLICATION_IDENTIFIER',
      },
      {
        pattern: '{{SUBSCRIBER_ID}}',
        getValue: (environment, user) => user?.externalId || 'YOUR_SUBSCRIBER_ID',
      },
    ],
  },
  {
    id: 'angular-inbox',
    title: 'app.component.ts',
    language: 'typescript',
    code: `import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { NovuUI } from '@novu/js/ui';

@Component({
  selector: 'app-root',
  standalone: true,
  templateUrl: './app.html',
  styleUrl: './app.css'
})
export class App implements AfterViewInit { 
  @ViewChild('novuInbox') novuInbox!: ElementRef<HTMLElement>;
  title = 'novu-angular';

  ngAfterViewInit() {
      const novu = new NovuUI({
        options: {
          applicationIdentifier: '{{APPLICATION_IDENTIFIER}}',
          subscriberId: '{{SUBSCRIBER_ID}}',
        },
      });

      novu.mountComponent({
        name: 'Inbox',
        props: {},
        element: this.novuInbox.nativeElement,
      });
  }
}`,
    replacements: [
      {
        pattern: '{{APPLICATION_IDENTIFIER}}',
        getValue: (environment, user) => environment?.identifier || 'YOUR_APPLICATION_IDENTIFIER',
      },
      {
        pattern: '{{SUBSCRIBER_ID}}',
        getValue: (environment, user) => user?.externalId || 'YOUR_SUBSCRIBER_ID',
      },
    ],
  },
  {
    id: 'react-inbox',
    title: 'src/components/notification-center.tsx',
    language: 'tsx',
    code: `import React from 'react';
import { Inbox } from '@novu/react';
import { useNavigate } from 'react-router';

export function NotificationCenter() {
  const navigate = useNavigate();

  return (
    <Inbox
      applicationIdentifier="YOUR_APPLICATION_IDENTIFIER"
      subscriber="YOUR_SUBSCRIBER_ID"
      routerPush={(path: string) => navigate(path)}
    />
  );
}`,
    replacements: [
      {
        pattern: '{{APPLICATION_IDENTIFIER}}',
        getValue: (environment, user) => environment?.identifier || 'YOUR_APPLICATION_IDENTIFIER',
      },
      {
        pattern: '{{SUBSCRIBER_ID}}',
        getValue: (environment, user) => user?.externalId || 'YOUR_SUBSCRIBER_ID',
      },
    ],
  },
  {
    id: 'remix-inbox',
    title: 'app/components/notification-center.tsx',
    language: 'tsx',
    code: `import React from 'react';
import { Inbox } from '@novu/react';
import { useNavigate } from 'react-router';

export function NotificationCenter() {
  const navigate = useNavigate();

  return (
    <Inbox
      applicationIdentifier="YOUR_APPLICATION_IDENTIFIER"
      subscriber="YOUR_SUBSCRIBER_ID"
      routerPush={(path: string) => navigate(path)}
    />
  );
}`,
    replacements: [
      {
        pattern: '{{APPLICATION_IDENTIFIER}}',
        getValue: (environment, user) => environment?.identifier || 'YOUR_APPLICATION_IDENTIFIER',
      },
      {
        pattern: '{{SUBSCRIBER_ID}}',
        getValue: (environment, user) => user?.externalId || 'YOUR_SUBSCRIBER_ID',
      },
    ],
  },
  {
    id: 'vue-inbox',
    title: 'src/components/NovuInbox.vue',
    language: 'vue',
    code: `<template>
  <!-- 
    This empty div serves as a mounting point for the Novu Inbox.
    We use Vue's ref attribute to get direct access to this DOM element.
  -->
  <div ref="novuInbox"></div>
</template>
 
<script setup lang="ts">
import { ref, onMounted, onUnmounted } from "vue";
import { NovuUI } from "@novu/js/ui";
 
interface NovuOptions {
  options: {
    applicationIdentifier: string;
    subscriberId: string;
  };
}
 
// Create a reactive reference to hold the DOM element
const novuInbox = ref<HTMLElement | null>(null);
// Store the Novu instance for cleanup during unmount
let novuInstance: NovuUI | null = null;
 
onMounted(() => {
  // Ensure our div reference exists before proceeding
  if (!novuInbox.value) {
    console.error("Novu inbox container element not found");
    return;
  }
 
  try {
    // Initialize the Novu UI instance with required configuration
    const novu = new NovuUI({
      options: {
        applicationIdentifier: 'YOUR_APPLICATION_IDENTIFIER',
        subscriberId: 'YOUR_SUBSCRIBER_ID',
      },
    } as NovuOptions);
 
    // Mount the Inbox component to our div reference
    // This is where Novu creates and injects its Inbox UI
    novu.mountComponent({
      name: "Inbox",
      props: {},
      element: novuInbox.value, // The actual DOM element where Inbox will be mounted
    });
 
    // Store the instance for cleanup
    novuInstance = novu;
  } catch (error) {
    console.error("Failed to initialize Novu inbox:", error);
  }
});
 
// Clean up when the component is destroyed
onUnmounted(() => {
  if (novuInstance && novuInbox.value) {
    try {
      // Properly unmount the Novu component to prevent memory leaks
      novuInstance.unmountComponent(novuInbox.value);
    } catch (error) {
      console.error("Failed to unmount Novu inbox:", error);
    }
  }
});
</script>`,
    replacements: [
      {
        pattern: '{{APPLICATION_IDENTIFIER}}',
        getValue: (environment, user) => environment?.identifier || 'YOUR_APPLICATION_IDENTIFIER',
      },
      {
        pattern: '{{SUBSCRIBER_ID}}',
        getValue: (environment, user) => user?.externalId || 'YOUR_SUBSCRIBER_ID',
      },
    ],
  },
];

// Generic function to process code templates
function processCodeTemplate(
  template: CodeTemplate,
  environment: Environment | null,
  user: User
): string {
  let processedCode = template.code;

  if (template.replacements) {
    template.replacements.forEach((replacement) => {
      const value = replacement.getValue(environment, user);
      processedCode = processedCode.replace(new RegExp(replacement.pattern, 'g'), value);
    });
  }

  return processedCode;
}

// Reusable component for any code template
interface CodeTemplateBlockProps {
  templateId: string;
  customTitle?: string;
}

export function CodeTemplateBlock({ templateId, customTitle }: CodeTemplateBlockProps) {
  const { user } = useUser();
  const { userId, getToken } = useAuth();
  const [environment, setEnvironment] = useState<Environment | null>(null);

  useEffect(() => {
    async function fetchNovuData() {
      if (!userId) {
        return;
      }

      try {
        const token = await getToken();
        if (!token) {
          throw new Error('No authentication token available');
        }

        const { data } = await get<EnvironmentsResponse>('/environments', {
          token,
        });
        const devEnvironment = data.find((env: Environment) => env.name === 'Development');

        if (!devEnvironment) {
          throw new Error('Development environment not found');
        }

        setEnvironment(devEnvironment);
      } catch (err) {
        console.error(err);
      }
    }

    void fetchNovuData();
  }, [userId, getToken]);

  const template = CODE_TEMPLATES.find((t) => t.id === templateId);

  if (!template) {
    return <div>Template not found: {templateId}</div>;
  }

  const processedCode = processCodeTemplate(template, environment, user || null);

  return (
    <>
      <DynamicCodeBlock
        title={customTitle || template.title}
        code={processedCode}
        lang={template.language}
      />
      <SignedOut>
        <div className="text-sm text-gray-500 text-center mt-2">
          <Link href="https://dashboard.novu.co/auth/sign-up">Sign in</Link> to get your own API
          keys
        </div>
      </SignedOut>
    </>
  );
}

// Legacy component for backward compatibility
export function InboxCodeBlock() {
  return <CodeTemplateBlock templateId="nextjs-inbox" />;
}

// Usage examples:
// <CodeTemplateBlock templateId="nextjs-inbox" />
// <CodeTemplateBlock templateId="angular-inbox" />
// <CodeTemplateBlock templateId="react-inbox" />
// <CodeTemplateBlock templateId="nextjs-inbox" customTitle="Custom Title" />

// Utility function to add new templates dynamically
export function addCodeTemplate(template: CodeTemplate) {
  const existingIndex = CODE_TEMPLATES.findIndex((t) => t.id === template.id);
  if (existingIndex >= 0) {
    CODE_TEMPLATES[existingIndex] = template;
  } else {
    CODE_TEMPLATES.push(template);
  }
}
