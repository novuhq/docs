'use client';
import type { ScrollAreaViewportProps } from '@radix-ui/react-scroll-area';
import { HighlightOptions } from 'fumadocs-core/highlight';
import { useShiki } from 'fumadocs-core/highlight/client';
import { Check, Copy } from 'lucide-react';
import {
  type ButtonHTMLAttributes,
  type HTMLAttributes,
  type ReactNode,
  forwardRef,
  useCallback,
  useRef,
} from 'react';
import { cn } from '../lib/cn';
import { useCopyButton } from '../lib/use-copy-button';
import { buttonVariants } from './ui/button';
import { ScrollArea, ScrollBar, ScrollViewport } from './ui/scroll-area';

export type CodeBlockProps = HTMLAttributes<HTMLElement> & {
  /**
   * Icon of code block
   *
   * When passed as a string, it assumes the value is the HTML of icon
   */
  icon?: ReactNode;

  /**
   * Allow to copy code with copy button
   *
   * @defaultValue true
   */
  allowCopy?: boolean;

  /**
   * Keep original background color generated by Shiki or Rehype Code
   *
   * @defaultValue false
   */
  keepBackground?: boolean;

  viewportProps?: ScrollAreaViewportProps;
};

export const Pre = forwardRef<HTMLPreElement, HTMLAttributes<HTMLPreElement>>(
  ({ className, ...props }, ref) => {
    return (
      <pre ref={ref} className={cn('p-4 focus-visible:outline-none', className)} {...props}>
        {props.children}
      </pre>
    );
  }
);

Pre.displayName = 'Pre';

export const CodeBlock = forwardRef<HTMLElement, CodeBlockProps>(
  ({ title, allowCopy = true, keepBackground = false, icon, viewportProps, ...props }, ref) => {
    const areaRef = useRef<HTMLDivElement>(null);
    const onCopy = useCallback(() => {
      const pre = areaRef.current?.getElementsByTagName('pre').item(0);

      if (!pre) return;

      const clone = pre.cloneNode(true) as HTMLElement;
      clone.querySelectorAll('.nd-copy-ignore').forEach((node) => {
        node.remove();
      });

      void navigator.clipboard.writeText(clone.textContent ?? '');
    }, []);

    return (
      <figure
        ref={ref}
        {...props}
        className={cn(
          'not-prose group fd-codeblock relative my-6 overflow-hidden rounded-lg border bg-fd-secondary/50 text-sm',
          keepBackground && 'bg-(--shiki-light-bg) dark:bg-(--shiki-dark-bg)',
          props.className
        )}
      >
        {title ? (
          <div className="flex flex-row items-center gap-2 border-b bg-fd-muted px-4 py-1.5">
            {icon ? (
              <div
                className="text-fd-muted-foreground [&_svg]:size-3.5"
                dangerouslySetInnerHTML={
                  typeof icon === 'string'
                    ? {
                        __html: icon,
                      }
                    : undefined
                }
              >
                {typeof icon !== 'string' ? icon : null}
              </div>
            ) : null}
            <figcaption className="flex-1 truncate text-fd-muted-foreground">{title}</figcaption>
            {allowCopy ? <CopyButton className="-me-2" onCopy={onCopy} /> : null}
          </div>
        ) : (
          allowCopy && (
            <CopyButton className="absolute right-2 top-2 z-[2] backdrop-blur-md" onCopy={onCopy} />
          )
        )}
        <ScrollArea ref={areaRef} dir="ltr">
          <ScrollViewport
            {...viewportProps}
            className={cn('max-h-[600px]', viewportProps?.className)}
          >
            {props.children}
          </ScrollViewport>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </figure>
    );
  }
);

CodeBlock.displayName = 'CodeBlock';

function CopyButton({
  className,
  onCopy,
  ...props
}: ButtonHTMLAttributes<HTMLButtonElement> & {
  onCopy: () => void;
}) {
  const [checked, onClick] = useCopyButton(onCopy);

  return (
    <button
      type="button"
      className={cn(
        buttonVariants({
          color: 'ghost',
        }),
        'transition-all duration-200 group-hover:opacity-100 [&_svg]:size-3.5',
        !checked && '[@media(hover:hover)]:opacity-0',
        checked && 'text-green-500',
        className
      )}
      aria-label={checked ? 'Copied Text' : 'Copy Text'}
      onClick={onClick}
      {...props}
    >
      <span className="relative flex items-center justify-center">
        <Check
          className={cn(
            'absolute transition-all duration-200',
            checked ? 'scale-100 opacity-100' : 'scale-0 opacity-0'
          )}
        />
        <Copy
          className={cn(
            'transition-all duration-200',
            checked ? 'scale-0 opacity-0' : 'scale-100 opacity-100'
          )}
        />
      </span>
    </button>
  );
}

export function DynamicCodeBlock({
  title,
  lang,
  code,
  options,
}: {
  title?: string;
  lang: string;
  code: string;
  options?: Omit<HighlightOptions, 'lang'>;
}) {
  const customComponents = {
    pre(props) {
      return (
        <CodeBlock {...props} title={title} className={cn('my-0', props.className)}>
          <Pre>{props.children}</Pre>
        </CodeBlock>
      );
    },
  } satisfies HighlightOptions['components'];

  return useShiki(code, {
    lang,
    ...options,
    components: {
      ...customComponents,
      ...options?.components,
    },
    withPrerenderScript: true,
  } as Parameters<typeof useShiki>[1]);
}
